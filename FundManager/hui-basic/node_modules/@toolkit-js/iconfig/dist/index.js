'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var path__namespace = /*#__PURE__*/_interopNamespace(path);

// https://prettier.io/docs/en/options.html
var prettierrc = {
  singleQuote: true,
  trailingComma: 'all',
  printWidth: 100,
  proseWrap: 'never',
  tabWidth: 2,
  endOfLine: 'lf',
  overrides: [// https://prettier.io/docs/en/configuration.html#configuration-overrides
  ]
};

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var tsEslintConfig = {
  'no-undef': 0,
  '@typescript-eslint/adjacent-overload-signatures': 0,
  '@typescript-eslint/array-type': 'error',
  '@typescript-eslint/await-thenable': 0,
  '@typescript-eslint/ban-ts-comment': 0,
  '@typescript-eslint/ban-tslint-comment': 0,
  'brace-style': 'off',
  '@typescript-eslint/brace-style': 0,
  '@typescript-eslint/class-literal-property-style': 0,
  'comma-dangle': 'off',
  '@typescript-eslint/comma-dangle': 0,
  'comma-spacing': 'off',
  '@typescript-eslint/comma-spacing': 0,
  '@typescript-eslint/consistent-indexed-object-style': 1,
  '@typescript-eslint/consistent-type-assertions': 0,
  '@typescript-eslint/consistent-type-definitions': 0,
  '@typescript-eslint/consistent-type-imports': 1,
  'default-param-last': 'off',
  '@typescript-eslint/default-param-last': 0,
  'dot-notation': 'off',
  '@typescript-eslint/dot-notation': 1,
  '@typescript-eslint/explicit-function-return-type': 0,
  'func-call-spacing': 'off',
  '@typescript-eslint/func-call-spacing': 0,
  indent: 'off',
  'init-declarations': 'off',
  '@typescript-eslint/init-declarations': 0,
  'keyword-spacing': 'off',
  '@typescript-eslint/keyword-spacing': 0,
  'lines-between-class-members': 'off',
  '@typescript-eslint/lines-between-class-members': 0,
  '@typescript-eslint/member-delimiter-style': 0,
  '@typescript-eslint/member-ordering': 0,
  '@typescript-eslint/method-signature-style': 'error',
  'no-array-constructor': 'off',
  '@typescript-eslint/no-array-constructor': 0,
  '@typescript-eslint/no-base-to-string': 0,
  '@typescript-eslint/no-confusing-non-null-assertion': 'error',
  '@typescript-eslint/no-confusing-void-expression': 0,
  'no-dupe-class-members': 'off',
  '@typescript-eslint/no-dupe-class-members': 'error',
  'no-duplicate-imports': 'off',
  '@typescript-eslint/no-duplicate-imports': 0,
  '@typescript-eslint/no-dynamic-delete': 0,
  'no-empty-function': 'off',
  '@typescript-eslint/no-empty-function': 0,
  '@typescript-eslint/no-empty-interface': 1,
  '@typescript-eslint/no-extra-non-null-assertion': 0,
  'no-extra-parens': 'off',
  '@typescript-eslint/no-extra-parens': 0,
  'no-extra-semi': 'off',
  '@typescript-eslint/no-extra-semi': 0,
  '@typescript-eslint/no-extraneous-class': 0,
  '@typescript-eslint/no-floating-promises': 0,
  '@typescript-eslint/no-for-in-array': 'error',
  '@typescript-eslint/no-implicit-any-catch': 0,
  'no-implied-eval': 'off',
  '@typescript-eslint/no-implied-eval': 0,
  '@typescript-eslint/no-inferrable-types': 0,
  'no-invalid-this': 'off',
  '@typescript-eslint/no-invalid-this': 'error',
  '@typescript-eslint/no-invalid-void-type': 0,
  'no-loop-func': 'off',
  '@typescript-eslint/no-loop-func': 'error',
  'no-loss-of-precision': 'off',
  '@typescript-eslint/no-loss-of-precision': 0,
  'no-magic-numbers': 'off',
  '@typescript-eslint/no-magic-numbers': 0,
  '@typescript-eslint/no-misused-new': 'error',
  '@typescript-eslint/no-misused-promises': 0,
  '@typescript-eslint/no-namespace': 1,
  '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
  '@typescript-eslint/no-parameter-properties': 'error',
  'no-redeclare': 'off',
  '@typescript-eslint/no-redeclare': 'error',
  '@typescript-eslint/no-require-imports': 0,
  'no-shadow': 'off',
  '@typescript-eslint/no-shadow': 'error',
  '@typescript-eslint/no-this-alias': 'error',
  'no-throw-literal': 'off',
  '@typescript-eslint/no-throw-literal': 'error',
  '@typescript-eslint/no-type-alias': 0,
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': 0,
  '@typescript-eslint/no-unnecessary-condition': 0,
  '@typescript-eslint/no-unnecessary-qualifier': 0,
  '@typescript-eslint/no-unnecessary-type-arguments': 0,
  '@typescript-eslint/no-unnecessary-type-assertion': 0,
  '@typescript-eslint/no-unnecessary-type-constraint': 0,
  '@typescript-eslint/no-unsafe-assignment': 0,
  '@typescript-eslint/no-unsafe-call': 0,
  '@typescript-eslint/no-unsafe-member-access': 0,
  '@typescript-eslint/no-unsafe-return': 0,
  'no-unused-expressions': 'off',
  '@typescript-eslint/no-unused-expressions': 'error',
  'no-unused-vars': 'off',
  'no-use-before-define': 'off',
  'no-useless-constructor': 'off',
  '@typescript-eslint/no-useless-constructor': 'error',
  '@typescript-eslint/non-nullable-type-assertion-style': 0,
  '@typescript-eslint/prefer-as-const': 0,
  '@typescript-eslint/prefer-enum-initializers': 0,
  '@typescript-eslint/prefer-for-of': 0,
  '@typescript-eslint/prefer-function-type': 0,
  '@typescript-eslint/prefer-includes': 0,
  '@typescript-eslint/prefer-literal-enum-member': 0,
  '@typescript-eslint/prefer-namespace-keyword': 0,
  '@typescript-eslint/prefer-nullish-coalescing': 0,
  '@typescript-eslint/prefer-optional-chain': 0,
  '@typescript-eslint/prefer-readonly': 0,
  '@typescript-eslint/prefer-readonly-parameter-types': 0,
  '@typescript-eslint/prefer-reduce-type-parameter': 0,
  '@typescript-eslint/prefer-regexp-exec': 0,
  '@typescript-eslint/prefer-string-starts-ends-with': 0,
  '@typescript-eslint/prefer-ts-expect-error': 0,
  '@typescript-eslint/promise-function-async': 0,
  quotes: 'off',
  '@typescript-eslint/quotes': 0,
  '@typescript-eslint/require-array-sort-compare': 0,
  'require-await': 'off',
  '@typescript-eslint/require-await': 0,
  '@typescript-eslint/restrict-plus-operands': 0,
  '@typescript-eslint/restrict-template-expressions': 0,
  'no-return-await': 'off',
  '@typescript-eslint/return-await': 0,
  semi: 'off',
  '@typescript-eslint/semi': 0,
  'space-before-function-paren': 'off',
  '@typescript-eslint/space-before-function-paren': 0,
  'space-infix-ops': 'off',
  '@typescript-eslint/space-infix-ops': 0,
  '@typescript-eslint/strict-boolean-expressions': 0,
  '@typescript-eslint/switch-exhaustiveness-check': 'error',
  '@typescript-eslint/triple-slash-reference': 'error',
  '@typescript-eslint/type-annotation-spacing': 'error',
  '@typescript-eslint/typedef': 'error',
  '@typescript-eslint/unbound-method': 0,
  '@typescript-eslint/unified-signatures': 'error',
  '@typescript-eslint/indent': 0,
  // Makes no sense to allow type inferrence for expression parameters, but require typing the response
  '@typescript-eslint/no-use-before-define': ['error', {
    functions: false,
    classes: true,
    variables: true,
    typedefs: true
  }],
  camelcase: 0,
  '@typescript-eslint/camelcase': 0,
  '@typescript-eslint/no-var-requires': 0,
  // Common abbreviations are known and readable
  '@typescript-eslint/explicit-member-accessibility': 0,
  '@typescript-eslint/interface-name-prefix': 0,
  '@typescript-eslint/no-non-null-assertion': 0,
  '@typescript-eslint/no-explicit-any': 0,
  '@typescript-eslint/ban-types': 1,
  '@typescript-eslint/explicit-module-boundary-types': 0,
  '@typescript-eslint/naming-convention': 0,
  '@typescript-eslint/no-unused-vars': ['error', {
    vars: 'all',
    args: 'after-used',
    ignoreRestSiblings: true
  }]
};

const isTsProject = fs__namespace.existsSync(path__namespace.join(process.cwd() || '.', './tsconfig.json'));
const eslintOptions$1 = {
  extends: ['airbnb-base', 'plugin:eslint-comments/recommended', 'plugin:vue/recommended', 'prettier', ...(isTsProject ? ['plugin:@typescript-eslint/recommended'] : [])],
  env: {
    browser: true,
    node: true,
    es6: true,
    mocha: true,
    jest: true,
    jasmine: true
  },
  parserOptions: {
    // https://eslint.vuejs.org/user-guide/#how-to-use-a-custom-parser
    parser: isTsProject ? '@typescript-eslint/parser' : '@babel/eslint-parser',
    ecmaFeatures: {
      jsx: true
    },
    babelOptions: {
      presets: ['@babel/preset-env', '@babel/preset-typescript'],
      plugins: [['@babel/plugin-proposal-decorators', {
        legacy: true
      }], ['@babel/plugin-proposal-class-properties', {
        loose: true
      }], ['@babel/plugin-proposal-private-methods', {
        loose: true
      }]]
    },
    requireConfigFile: false,
    project: './tsconfig.json'
  },
  plugins: ['jest', 'unicorn'],
  rules: _objectSpread2({
    // enforce that class methods use "this"
    // https://eslint.org/docs/rules/class-methods-use-this
    'class-methods-use-this': 0,
    // disallow reassignment of function parameters
    // disallow parameter object manipulation except for specific exclusions
    // rule: https://eslint.org/docs/rules/no-param-reassign.html
    'no-param-reassign': 2,
    // enforce the spacing around the * in generator functions
    // https://eslint.org/docs/rules/generator-star-spacing
    'generator-star-spacing': 0,
    // import sorting
    // https://eslint.org/docs/rules/sort-imports
    'sort-imports': 0,
    // disallow arrow functions where they could be confused with comparisons
    // https://eslint.org/docs/rules/no-confusing-arrow
    'no-confusing-arrow': 0,
    // enforces no braces where they can be omitted
    // https://eslint.org/docs/rules/arrow-body-style
    // TODO: enable requireReturnForObjectLiteral?
    'arrow-body-style': 0,
    // require parens in arrow function arguments
    // https://eslint.org/docs/rules/arrow-parens
    'arrow-parens': 0,
    // enforce consistent line breaks inside function parentheses
    // https://eslint.org/docs/rules/function-paren-newline
    'function-paren-newline': 0,
    // disallow mixed 'LF' and 'CRLF' as linebreaks
    // https://eslint.org/docs/rules/linebreak-style
    'linebreak-style': 0,
    // enforce line breaks between braces
    // https://eslint.org/docs/rules/object-curly-newline
    'object-curly-newline': 0,
    // Enforce the location of arrow function bodies with implicit returns
    // https://eslint.org/docs/rules/implicit-arrow-linebreak
    'implicit-arrow-linebreak': 0,
    // Requires operator at the beginning of the line in multiline statements
    // https://eslint.org/docs/rules/operator-linebreak
    'operator-linebreak': 0,
    // require or disallow space before function opening parenthesis
    // https://eslint.org/docs/rules/space-before-function-paren
    'space-before-function-paren': 0,
    // disallow use of Object.prototypes builtins directly
    // https://eslint.org/docs/rules/no-prototype-builtins
    'no-prototype-builtins': 0,
    'import/no-unresolved': 0,
    'import/order': 0,
    'import/no-named-as-default': 0,
    'import/no-cycle': 0,
    'import/prefer-default-export': 0,
    'import/no-default-export': 0,
    'import/no-extraneous-dependencies': 0,
    'import/named': 0,
    'import/no-named-as-default-member': 0,
    'import/no-duplicates': 0,
    'import/no-self-import': 0,
    'import/extensions': 0,
    'import/no-useless-path-segments': 0,
    'eslint-comments/no-unlimited-disable': 0,
    'unicorn/prevent-abbreviations': 0
  }, isTsProject ? tsEslintConfig : {}),
  settings: {
    // support import modules from TypeScript files in JavaScript files
    'import/resolver': {
      node: {
        extensions: isTsProject ? ['.js', '.jsx', '.ts', '.tsx', '.d.ts'] : ['.js', '.jsx']
      }
    },
    'import/parsers': {
      '@typescript-eslint/parser': ['.ts', '.tsx', '.d.ts']
    },
    'import/extensions': ['.js', '.mjs', '.jsx', '.ts', '.tsx', '.d.ts'],
    'import/external-module-folders': ['node_modules', 'node_modules/@types'],
    polyfills: ['fetch', 'Promise', 'URL', 'object-assign']
  }
};
module.exports = eslintOptions$1;

const stylelintOptions$1 = {
  extends: ['stylelint-config-standard', 'stylelint-config-css-modules', 'stylelint-config-rational-order', 'stylelint-config-prettier'],
  plugins: ['stylelint-order', 'stylelint-no-unsupported-browser-features', 'stylelint-declaration-block-no-ignored-properties'],
  rules: {
    'font-family-no-missing-generic-family-keyword': null,
    // iconfont
    'function-calc-no-invalid': null,
    'function-url-quotes': 'always',
    'no-descending-specificity': null,
    'unit-no-unknown': [true, {
      ignoreUnits: ['rpx']
    }],
    'plugin/declaration-block-no-ignored-properties': true
  },
  ignoreFiles: ['**/*.js', '**/*.jsx', '**/*.tsx', '**/*.ts']
};
module.exports = stylelintOptions$1;

const eslintOptions = {
  extends: ['@winner-fed/win', '@winner-fed/win/vue'],
  parser: 'vue-eslint-parser',
  parserOptions: {
    parser: '@babel/eslint-parser'
  }
};
module.exports = eslintOptions;

const stylelintOptions = {
  extends: '@winner-fed/stylelint-config-win'
};
module.exports = stylelintOptions;

exports.eslint = eslintOptions$1;
exports.eslintHS = eslintOptions;
exports.eslintOptions = eslintOptions$1;
exports.eslintOptionsHS = eslintOptions;
exports.prettier = prettierrc;
exports.prettierOptions = prettierrc;
exports.stylelint = stylelintOptions$1;
exports.stylelintHS = stylelintOptions;
exports.stylelintOptions = stylelintOptions$1;
exports.stylelintOptionsHS = stylelintOptions;
