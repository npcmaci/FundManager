"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eslint = require("eslint");

var _stylelint = require("stylelint");

var _fsExtra = require("fs-extra");

var _ora = _interopRequireDefault(require("ora"));

var _chalk = _interopRequireDefault(require("chalk"));

var _stylelintFormatterTable = _interopRequireDefault(require("./utils/stylelintFormatterTable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function huiPluginLint(api, options = {}) {
  api.registerCommand('lint', {
    description: '代码校验, 支持 eslint, stylelint 校验规则',
    usage: 'hui lint',
    options: [{
      name: '--es',
      description: '执行 eslint 校验',
      value: false
    }, {
      name: '--style',
      description: '执行 stylelint 校验',
      value: false
    }, {
      name: '--fix',
      description: '自动修复违反特定规则的行为',
      value: false
    }, {
      name: '--lint-files <lintFiles>',
      description: '指定目标文件, 支持 glob 模式'
    }]
  }, /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (args) {
      const es = args.es,
            style = args.style,
            lintFiles = args.lintFiles,
            fix = args.fix; // 检查 stylelintrc 是否存在

      let existStylelintrc = (0, _fsExtra.pathExistsSync)('.stylelintrc.js');

      if (es && !style) {
        eslintFormat(lintFiles, fix);
      } else if (!es && style) {
        stylelintFormat(existStylelintrc, lintFiles, fix);
      } else {
        try {
          yield eslintFormat(lintFiles, fix);
        } catch (error) {
          process.exitCode = 1;
          spinner(error).warn();
        }

        stylelintFormat(existStylelintrc, lintFiles, fix);
      }
    });

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
} // 调用 eslint api


function eslintFormat(lintFiles, fix) {
  return function () {
    var _main = _asyncToGenerator(function* () {
      spinner(`开始执行 eslint 校验\n`).info();
      let options = {
        baseConfig: {
          extends: [require.resolve('@toolkit-js/iconfig/lib/eslintrc-hs')],
          rules: {}
        }
      }; // 如果开启自动修复

      if (fix) {
        options.fix = true;
      }

      const eslint = new _eslint.ESLint(options); // Lint files. glob 模式指定目标文件

      const results = yield eslint.lintFiles([lintFiles === undefined ? 'src/**/*.{vue,js,jsx}' : lintFiles]); // 等待 eslint 修复错误

      yield _eslint.ESLint.outputFixes(results); // Format the results. 使用内置格式化程序

      const formatter = yield eslint.loadFormatter('table');
      const resultText = formatter.format(results); // 打印结果

      console.log(resultText);
      spinner(`eslint 校验结束\n`).info();
    });

    function main() {
      return _main.apply(this, arguments);
    }

    return main;
  }()();
} // 调用 stylelint api


function stylelintFormat(existStylelintrc, lintFiles, fix) {
  spinner(`开始执行 stylelint 校验\n`).info();
  let options = {
    files: lintFiles === undefined ? 'src/**/*.{vue,less,postcss,css,scss}' : lintFiles,
    formatter: _stylelintFormatterTable.default
  }; // 如果没有找到配置文件，增加默认配置项

  if (!existStylelintrc) {
    options.config = {
      extends: [require.resolve('@toolkit-js/iconfig/lib/stylelintrc-hs')],
      rules: {}
    };
  }

  if (fix) {
    options.fix = true;
  }

  (0, _stylelint.lint)(options).then(function (data) {
    console.log(data === null || data === void 0 ? void 0 : data.output);
    spinner(`stylelint 校验结束\n`).info();
  }).catch(function (err) {
    spinner(err.stack).warn();
  });
}

function spinner(text) {
  return (0, _ora.default)({
    text: `${_chalk.default.white('[LINT] ')}${text}`
  });
}

var _default = huiPluginLint; // maintain compatibility with older service

exports.default = _default;
module.exports = huiPluginLint;