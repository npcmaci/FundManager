'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _table = require("table");

var _pluralize = _interopRequireDefault(require("pluralize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function drawTable(messages) {
  const rows = [];

  if (messages.length === 0) {
    return '';
  }

  rows.push([_chalk.default.bold('Line'), _chalk.default.bold('Column'), _chalk.default.bold('Type'), _chalk.default.bold('Message'), _chalk.default.bold('Rule'), _chalk.default.bold('Source')]);
  messages.forEach(message => {
    let messageType;

    if (message.severity === 'error') {
      messageType = _chalk.default.red('error');
    } else {
      messageType = _chalk.default.yellow('warning');
    }

    rows.push([message.line || 0, message.column || 0, messageType, message.text, message.rule || '', message.source || '']);
  });
  return (0, _table.table)(rows, {
    columns: {
      0: {
        width: 8,
        wrapWord: true
      },
      1: {
        width: 8,
        wrapWord: true
      },
      2: {
        width: 8,
        wrapWord: true
      },
      3: {
        paddingRight: 5,
        width: 50,
        wrapWord: true
      },
      4: {
        width: 20,
        wrapWord: true
      },
      5: {
        width: 50,
        wrapWord: true
      }
    },
    border: {},

    drawHorizontalLine(index, size) {
      return index === 0 || index === 1 || index === rows.length;
    }

  });
}

function drawCountTable(errorCount, warningCount) {
  let rows = [[_chalk.default.red((0, _pluralize.default)('Error', errorCount, true))], [_chalk.default.yellow((0, _pluralize.default)('Warning', warningCount, true))]];
  return (0, _table.table)(rows, {
    columns: {
      0: {
        width: 163,
        wrapWord: true
      }
    },

    drawHorizontalLine() {
      return true;
    }

  });
}

function stylelintFormatterTableHandler(results) {
  const rootPath = process.cwd();
  let file = [];
  let errorCount = 0;
  let warningCount = 0;
  let warningArray = [];
  results.forEach(message => {
    const warnings = message.warnings || [];

    if (warnings && warnings.length) {
      errorCount += warnings.filter(warning => warning.severity === 'error').length;
      warningCount += warnings.filter(warning => warning.severity !== 'error').length;
    }

    if (message.errored || warnings.length) {
      warnings.forEach(item => {
        // 去掉 source 里的当前命令执行目录
        item.source = message.source.replace(rootPath + '\\', ''); // 去掉 message 里的 rule 字段与 rule 列重复

        item.text = item.text.replace(`(${item.rule})`, '');
      });
      warningArray = warningArray.concat(warnings);
    }
  });
  file.push(`${drawTable(warningArray)}\n\n`);
  file.push(`${drawCountTable(errorCount, warningCount)}\n`);
  return file.join('');
}

var _default = stylelintFormatterTableHandler;
exports.default = _default;