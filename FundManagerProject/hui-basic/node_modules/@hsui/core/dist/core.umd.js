(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@hsui/sdk'), require('@hsui/logger'), require('vue'), require('vue-router'), require('@@/huiExports')) :
  typeof define === 'function' && define.amd ? define(['exports', '@hsui/sdk', '@hsui/logger', 'vue', 'vue-router', '@@/huiExports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.core = {}, global.huiSdk, global.huiLogger, global.vue$1, global.VueRouter, global.huiExports));
}(this, (function (exports, sdk, logger$1, Model, Router, huiExports) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var Model__default = /*#__PURE__*/_interopDefaultLegacy(Model);
  var Router__default = /*#__PURE__*/_interopDefaultLegacy(Router);

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }

    return receiver;
  }

  var id = 0;
  function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  /**
   * Native isArray
   */
  var isArray = Array.isArray;
  /**
   * Underscore isFunction
   */

  function isFunction(value) {
    return Object.prototype.toString.call(value) === '[object Function]';
  }
  /**
   * Redux isPlainObject
   */

  function isPlainObject(obj) {
    if (_typeof(obj) !== 'object' || obj === null) return false;
    var proto = obj;

    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(obj) === proto;
  }
  /**
   * Check if powered by HUI Micro App
   */

  function isMicroApp() {
    return Boolean(window.__POWERED_BY_HUI_MICRO_APP__);
  }
  /**
   * simple generate uuid
   * 支持 ie10 及以上
   * 基于 uuid v4 添加 performance.now 避免重复
   */

  function uuid() {
    var d = Date.now();

    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
      d += performance.now(); //use high-precision timer if available
    }

    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = (d + Math.random() * 16) % 16 | 0;
      d = Math.floor(d / 16);
      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
  }
  /**
   * Underscore uniqueId
   */

  var idCounter = 0;
  function uniqueId(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  }
  /**
   * Native extend
   */

  var extend = Object.assign;
  /**
   * Underscore clone
   */

  function clone(value) {
    if (!isObject(value)) return value;
    return isArray(value) ? value.slice() : extend({}, value);
  }
  /**
   * DeepClone
   */

  function deepClone(value) {
    return JSON.parse(JSON.stringify(value));
  }

  var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    isArray: isArray,
    isFunction: isFunction,
    isPlainObject: isPlainObject,
    isMicroApp: isMicroApp,
    uuid: uuid,
    uniqueId: uniqueId,
    extend: extend,
    clone: clone,
    deepClone: deepClone
  });

  /**
   * Lodash isUndefined
   */

  function isUndefined(value) {
    return value === undefined;
  }
  /**
   * Lodash noop
   */

  function noop() {// No operation performed.
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  /**
   * @class - MiddlewareManager
   * @classdesc - manager of middlewares
   */

  var MiddlewareManager = /*#__PURE__*/function () {
    function MiddlewareManager(type) {
      _classCallCheck(this, MiddlewareManager);

      this.type = type;
      this.middlewares = [];
      this.finalHook = noop;
    }

    _createClass(MiddlewareManager, [{
      key: "final",
      value: function final(hook) {
        this.finalHook = hook;
      }
    }, {
      key: "concat",
      value: function concat(middlewares) {
        this.middlewares = this.middlewares.concat(middlewares);
      }
    }, {
      key: "push",
      value: function push(middleware) {
        this.middlewares.push(middleware);
      } // just run and return nothing

    }, {
      key: "justRun",
      value: function justRun() {
        this.args = Array.prototype.slice.call(arguments);

        var _this = this;

        var fn = function fn(index) {
          if (index < this.middlewares.length) {
            this.middlewares[index].apply(null, [].concat(_toConsumableArray(this.args), [function () {
              fn.call(_this, ++index);
            }]));
          } else {
            this.finalHook.apply(null, this.args);
          }
        };

        fn.call(_this, 0);
      } // run middlewares and return a promise

    }, {
      key: "runAndReturn",
      value: function runAndReturn() {
        this.args = Array.prototype.slice.call(arguments);

        var _this = this;

        return new Promise(function (resolve, reject) {
          var fn = function fn(index) {
            if (index < this.middlewares.length) {
              try {
                this.middlewares[index].apply(null, [].concat(_toConsumableArray(this.args), [function () {
                  fn.call(_this, ++index);
                }]));
              } catch (error) {
                reject(error);
              }
            } else {
              // final hook should return a promise too
              this.finalHook.apply(null, this.args).then(resolve).catch(reject);
            }
          };

          fn.call(_this, 0);
        });
      }
    }]);

    return MiddlewareManager;
  }();
  var manager = {};
  ['before-route-change', 'after-route-change', 'before-request-send', 'after-request-send', 'before-launch'].forEach(function (type) {
    manager[type] = new MiddlewareManager(type);
  });
  var beforeRouteChange = manager['before-route-change'];
  var afterRouteChange = manager['after-route-change'];
  var beforeRequestSend = manager['before-request-send'];
  var afterRequestSend = manager['after-request-send'];
  var beforeLaunch = manager['before-launch'];
  function registerMiddleware(type, middleware) {
    if (isFunction(middleware)) {
      manager[type].push(middleware);
    }

    if (isArray(middleware)) {
      manager[type].concat(middleware);
    }
  }

  var logger = logger$1.createLogger();
  var log = function log() {
    for (var _len = arguments.length, content = new Array(_len), _key = 0; _key < _len; _key++) {
      content[_key] = arguments[_key];
    }

    return logger.info.apply(logger, content);
  };
  logger.levels.forEach(function (level) {
    log[level] = function () {
      for (var _len2 = arguments.length, content = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        content[_key2] = arguments[_key2];
      }

      return logger[level].apply(logger, content);
    };
  });

  function final_(error, response) {
    if (error) {
      return Promise.reject(error);
    }

    return Promise.resolve(response);
  }

  var defaultConfig = {
    method: 'post',
    data: {},
    timeout: 5000,
    headers: {},
    withCredentials: false
  };

  var Fetch = function Fetch() {
    var _config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Fetch);

    extend(defaultConfig, _config);
    beforeRequestSend.final(function (config) {
      return new Promise(function (resolve, reject) {
        var error, response;
        sdk.ajax(config).then(function (res) {
          return response = res;
        }).catch(function (err) {
          return error = err;
        }).finally(function () {
          afterRequestSend.runAndReturn(error, response).then(resolve).catch(reject);
        });
      });
    });
    afterRequestSend.final(final_);

    function fetch(config) {
      log.debug('Fetch 实例初始化选项', _objectSpread2(_objectSpread2({}, defaultConfig), config));
      return beforeRequestSend.runAndReturn(_objectSpread2(_objectSpread2({}, defaultConfig), config));
    }

    fetch.get = function (url, config) {
      if (config) {
        extend(config, {
          url: url,
          method: 'get'
        });
      } else {
        config = {
          url: url,
          method: 'get'
        };
      }

      return fetch(config);
    };

    fetch.post = function (url, data, config) {
      if (config) {
        extend(config, {
          url: url,
          method: 'post',
          data: data
        });
      } else {
        config = {
          url: url,
          method: 'post',
          data: data
        };
      }

      return fetch(config);
    };

    return fetch;
  };
  function initFetch() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$defaultConfig = _ref.defaultConfig,
        defaultConfig = _ref$defaultConfig === void 0 ? {
      method: 'post',
      data: {},
      timeout: 5000,
      headers: {},
      withCredentials: false
    } : _ref$defaultConfig,
        _ref$beforeRequestSen = _ref.beforeRequestSendMiddlewares,
        beforeRequestSendMiddlewares = _ref$beforeRequestSen === void 0 ? [] : _ref$beforeRequestSen,
        _ref$afterRequestSend = _ref.afterRequestSendMiddlewares,
        afterRequestSendMiddlewares = _ref$afterRequestSend === void 0 ? [] : _ref$afterRequestSend;

    var beforeRequestSend = new MiddlewareManager('before-request-send');
    beforeRequestSend.concat(beforeRequestSendMiddlewares);
    var afterRequestSend = new MiddlewareManager('after-request-send');
    afterRequestSend.concat(afterRequestSendMiddlewares);
    afterRequestSend.final(final_);
    beforeRequestSend.final(function (config) {
      return new Promise(function (resolve, reject) {
        var error, response;
        sdk.ajax(config).then(function (res) {
          return response = res;
        }).catch(function (err) {
          return error = err;
        }).finally(function () {
          afterRequestSend.runAndReturn(error, response).then(resolve).catch(reject);
        });
      });
    });

    var fetch = function fetch(config) {
      log.debug('Fetch 实例初始化选项', _objectSpread2(_objectSpread2({}, defaultConfig), config));
      return beforeRequestSend.runAndReturn(_objectSpread2(_objectSpread2({}, defaultConfig), config));
    };

    fetch.get = function (url, config) {
      if (config) {
        extend(config, {
          url: url,
          method: 'get'
        });
      } else {
        config = {
          url: url,
          method: 'get'
        };
      }

      return fetch(config);
    };

    fetch.post = function (url, data, config) {
      if (config) {
        extend(config, {
          url: url,
          method: 'post',
          data: data
        });
      } else {
        config = {
          url: url,
          method: 'post',
          data: data
        };
      }

      return fetch(config);
    };

    return fetch;
  }

  var _require = require('../package.json'),
      version = _require.version;

  var isNavigationFailure = Router__default['default'].isNavigationFailure,
      NavigationFailureType = Router__default['default'].NavigationFailureType;
  var encodeReserveRE = /[!'()*]/g;

  var encodeReserveReplacer = function encodeReserveReplacer(c) {
    return '%' + c.charCodeAt(0).toString(16);
  };

  var commaRE = /%2C/g; // fixed encodeURIComponent which is more conformant to RFC3986:
  // - escapes [!'()*]
  // - preserve commas

  var encode = function encode(str) {
    return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
  };

  var decode = decodeURIComponent;
  var defaultRouterOpts = {
    scrollBehavior: function scrollBehavior() {
      return {
        x: 0,
        y: 0
      };
    }
  };
  var router = null;
  function initRouter$1(routes, opts) {
    if (router) return router; // 避免在调用 initRouter 之前注册，在 1.0 的场景下，多个子应用都访问 @hsui/core 的情况下会造成冲突

    Model__default['default'].use(Router__default['default']); // 合并 defaultRouterOpts

    opts = _objectSpread2(_objectSpread2({}, defaultRouterOpts), opts); // 保证在 hash 模式下也能从 location.search 中读取查询参数
    // TODO - 暂时还没有解决方案，在主子应用同时存在路由参数的情况下，url 会存在多个 search 片段的问题

    if (opts.mode === 'hash') {
      opts = _objectSpread2(_objectSpread2({}, opts), {}, {
        parseQuery: function parseQuery(query) {
          var res = {};
          query = query.trim().replace(/^(\?|#|&)/, '');

          if (!query) {
            var _location = location,
                search = _location.search;
            search = search.trim().replace(/^(\?|#|&)/, '');

            if (!search) {
              return res;
            }

            query = search;
          }

          query.split('&').forEach(function (param) {
            var parts = param.replace(/\+/g, ' ').split('=');
            var key = decode(parts.shift());
            var val = parts.length > 0 ? decode(parts.join('=')) : null;

            if (res[key] === undefined) {
              res[key] = val;
            } else if (Array.isArray(res[key])) {
              res[key].push(val);
            } else {
              res[key] = [res[key], val];
            }
          });
          return res;
        },
        stringifyQuery: function stringifyQuery(obj) {
          var res = obj ? Object.keys(obj).map(function (key) {
            var val = obj[key];

            if (val === undefined) {
              return '';
            }

            if (val === null) {
              return encode(key);
            }

            if (Array.isArray(val)) {
              var result = [];
              val.forEach(function (val2) {
                if (val2 === undefined) {
                  return;
                }

                if (val2 === null) {
                  result.push(encode(key));
                } else {
                  result.push(encode(key) + '=' + encode(val2));
                }
              });
              return result.join('&');
            }

            return encode(key) + '=' + encode(val);
          }).filter(function (x) {
            return x.length > 0;
          }).join('&') : null;

          if (res && !location.search.includes(res)) {
            return "?".concat(res);
          }

          return '';
        }
      });
    }

    router = new Router__default['default'](opts);

    if (routes) {
      router.addRoutes(routes);
    }

    log.debug('Router 实例', router);
    log.debug('Router 构建选项', opts);
    log.debug('Routes 路由记录', router.getRoutes());
    router.beforeEach(function (to, from, next) {
      log.debug('路由跳转前置导航守卫', to, from);
      next();
    });
    beforeRouteChange.middlewares.forEach(function (middleware) {
      return router.beforeEach(middleware);
    });
    router.afterEach(function (to, from) {
      log.debug('路由跳转后置导航守卫', to, from);
      afterRouteChange.justRun(to, from);
    });
    return router;
  }
  /**
   * Set default router options
   * @param {object} opts
   */

  function setRouterOpts(opts) {
    extend(defaultRouterOpts, opts);
  }
  /**
   * @description jump programmatically
   * @param {String} path target path
   * @param {Object} opts options
   * @param {Boolean} opts.history whether to keep current browser history, perform like pushState or replaceState, default true
   * @param {Boolean} opts.animation todo
   * @param {Object} query query params
   */

  function navigate(path, opts, query) {
    if (!router) return;
    var defaultOpts = {
      history: true
    };
    var defaultQuery = {};

    if (!_typeof(path) === 'string' || path === '') {
      log.error('navigate 方法必须指定 path 为字符串类型且不能为空');
      return false;
    } // 只有两个参数，则第二个为 query


    if (isPlainObject(opts) && isUndefined(query)) {
      query = opts;
      opts = defaultOpts;
    } // path 是必填项


    if (isUndefined(opts)) {
      opts = defaultOpts;
      query = defaultQuery;
    }

    var _opts = opts,
        history = _opts.history;

    var onError = function onError(err) {
      if (isNavigationFailure(err, NavigationFailureType.duplicated) || isNavigationFailure(err, NavigationFailureType.redirected)) {
        return;
      }

      log.error('路由跳转异常', err);
      throw err;
    };

    if (history) {
      router.push({
        path: path,
        query: query
      }).catch(onError);
    } else {
      router.replace({
        path: path,
        query: query
      }).catch(onError);
    }
  }
  /**
   * @description go forwards or go backwards in the history stack programmatically
   * @param {Number} n steps to go, setting to 0 perform like reload
   */

  function go(n) {
    if (!router) return;
    router.go(n);
  }

  var _arguments = arguments;
  /**
   * https://github.com/developit/mitt
   */

  function mitt(all) {
    all = all || new Map();
    return {
      on: function on(type, handler) {
        var handlers = all.get(type);
        var added = handlers && handlers.push(handler);

        if (!added) {
          all.set(type, [handler]);
        }

        log.debug('部署事件监听', type);
      },
      off: function off(type, handler) {
        var handlers = all.get(type);

        if (handlers) {
          if (handler) {
            handlers.splice(handlers.indexOf(handler) >>> 0, 1);
          } else {
            all.set(type, []);
          }
        }

        log.debug('取消事件监听', type);
      },
      emit: function emit(type) {
        log.debug.apply(log, ['触发事件监听'].concat(Array.prototype.slice.call(arguments)));
        var args = Array.prototype.slice.call(arguments);
        (all.get(type) || []).slice().map(function (handler) {
          log.debug('响应事件监听', type, handler);
          handler.apply(null, args.slice(1));
        });
        (all.get('*') || []).slice().map(function (handler) {
          log.debug('响应事件监听', type, handler);
          handler.apply(null, args);
        });
      }
    };
  }

  var emitter = mitt();

  emitter.once = function (type, handler) {
    var _handler = function _handler() {
      handler.apply(null, _toConsumableArray(_arguments));
      emitter.off(type, _handler);
    };

    emitter.on(type, _handler);
  };

  var on = emitter.on,
      once = emitter.once,
      off = emitter.off,
      emit = emitter.emit,
      trigger = emitter.emit;

  var _app = /*#__PURE__*/_classPrivateFieldKey("app");

  var _isNavigable = /*#__PURE__*/_classPrivateFieldKey("isNavigable");

  var _options = /*#__PURE__*/_classPrivateFieldKey("options");

  var _walkOpts = /*#__PURE__*/_classPrivateFieldKey("walkOpts");

  var HCore = /*#__PURE__*/function () {
    function HCore(_opts) {
      _classCallCheck(this, HCore);

      Object.defineProperty(this, _walkOpts, {
        value: _walkOpts2
      });
      Object.defineProperty(this, _app, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isNavigable, {
        writable: true,
        value: true
      });
      Object.defineProperty(this, _options, {
        writable: true,
        value: {
          el: '#app'
        }
      });

      if (!!_classPrivateFieldBase(this, _app)[_app]) {
        return _classPrivateFieldBase(this, _app)[_app];
      }

      _classPrivateFieldBase(this, _app)[_app] = this;

      _classPrivateFieldBase(this, _walkOpts)[_walkOpts](_opts);

      this.Model.prototype.$hCore = _classPrivateFieldBase(this, _app)[_app];

      if (!this.ajax) {
        var fetch = new Fetch();
        extend(this, {
          ajax: fetch,
          fetch: fetch
        });
      }

      extend(this, {
        middleware: registerMiddleware
      });
      extend(this, {
        on: on,
        once: once,
        off: off,
        emit: emit,
        trigger: trigger
      });
      extend(this, {
        log: log,
        logger: logger
      });
      extend(this, {
        utils: utils
      });
      extend(this, {
        storage: sdk.storage
      });
      extend(this, {
        navigate: navigate,
        go: go
      });
    }

    _createClass(HCore, [{
      key: "Model",
      get: function get() {
        return Model__default['default'];
      }
    }, {
      key: "options",
      get: function get() {
        return _classPrivateFieldBase(this, _options)[_options];
      }
    }, {
      key: "version",
      get: function get() {
        return version;
      }
    }, {
      key: "initRouter",
      value: function initRouter(routes, opts) {
        if (_classPrivateFieldBase(this, _isNavigable)[_isNavigable]) {
          var router = initRouter$1(routes, opts);

          extend(_classPrivateFieldBase(this, _options)[_options], {
            router: router,
            template: '<router-view></router-view>'
          });
          extend(this, {
            router: router
          });
        }
      }
    }, {
      key: "addRoutes",
      value: function addRoutes(routes) {
        if (this.router) {
          this.log.debug('新增 Routes 路由记录', routes);
          this.router.addRoutes(routes);
        } else {
          this.initRouter(routes);
        }
      }
    }, {
      key: "start",
      value: function start(cb) {
        var _this = this;

        // 在应用前要确保已经完成路由系统的初始化
        if (!this.router) {
          this.initRouter();
        } // 这里最好不要有异步逻辑，在微前端框架下可能会出现问题
        // 暂时不对外


        beforeLaunch.final(function () {
          // 在微前端框架下应用生命周期被接管
          if (!isMicroApp()) {
            _this.root = new _this.Model(_classPrivateFieldBase(_this, _options)[_options]);

            _this.root.$nextTick(function () {
              trigger('app-ready', _this.root);
              cb && cb(_this.root);
            });
          } else {
            // 启动的回调函数传递给 singleSpaVue，保持和独立运行一致的处理逻辑
            trigger('app-start', cb);
          }
        });
        beforeLaunch.justRun(this);
      }
    }]);

    return HCore;
  }();

  function _walkOpts2(opts) {
    var _this2 = this;

    if (isPlainObject(opts)) {
      Object.keys(opts).forEach(function (key) {
        // ajaxConfig === fetchConfig
        if (key === 'ajaxConfig' || key === 'fetchConfig') {
          var fetch = new Fetch(opts[key]);
          extend(_this2, {
            ajax: fetch,
            fetch: fetch
          }); // ajax === fetch
        } // logLevel


        if (key === 'logLevel') {
          logger.setLevel(opts[key]);
        } // extra vue options


        if (key === 'extraModelOptions') {
          var staticModelKey = ['router'];
          Object.keys(opts[key]).filter(function (modelKey) {
            return !staticModelKey.includes(modelKey);
          }).forEach(function (modelKey) {
            extend(_classPrivateFieldBase(_this2, _options)[_options], _defineProperty({}, modelKey, opts[key][modelKey])); // store

            if (modelKey === 'store') {
              extend(_this2, _defineProperty({}, modelKey, opts[key][modelKey]));
            }
          });
        } // extra router options


        if (key === 'extraRouterOptions') {
          if (typeof opts[key]['isNavigable'] !== 'undefined') {
            _classPrivateFieldBase(_this2, _isNavigable)[_isNavigable] = opts[key]['isNavigable'];
          }

          if (_classPrivateFieldBase(_this2, _isNavigable)[_isNavigable]) {
            _classPrivateFieldBase(_this2, _isNavigable)[_isNavigable] && setRouterOpts(opts[key]);
          }
        }
      });
    }
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var runtime = {exports: {}};

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  (function (module) {
  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
      return this;
    });

    define(Gp, "toString", function() {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  }(runtime));

  var regenerator = runtime.exports;

  /**
   * Find which layout the component should render.
   * If the component is not specified layout name, `default` is used.
   * Otherwise return undefined.
   */

  function resolveLayoutName(matched) {
    var defaultName = 'default';
    var last = matched[matched.length - 1];

    if (!last) {
      return;
    }

    var Component = last.components.default;

    if (!Component) {
      return;
    }

    var isAsync = typeof Component === 'function' && !Component.options;

    if (isAsync) {
      return;
    }

    return getLayoutName(Component) || defaultName;
  }

  function getLayoutName(Component
  /* ComponentOptions | VueConstructor */
  ) {
    var isCtor = typeof Component === 'function' && Component.options;
    var options = isCtor ? Component.options : Component;

    if (options.layout) {
      return options.layout;
    } else {
      // Retrieve super component and mixins
      var mixins = (options.mixins || []).slice().reverse();
      var extend = options.extends || [];
      return mixins.concat(extend).reduce(function (acc, c) {
        return acc || getLayoutName(c);
      }, undefined);
    }
  }

  function loadAsyncComponents(route) {
    var promises = [];
    route.matched.forEach(function (record) {
      Object.keys(record.components).forEach(function (key) {
        var component = record.components[key];
        var isAsync = typeof component === 'function' && !component.options;

        if (isAsync) {
          promises.push(component().then(function (loaded) {
            var isEsModule = loaded.__esModule || typeof Symbol !== 'undefined' && loaded[Symbol.toStringTag] === 'Module';
            record.components[key] = isEsModule ? loaded.default : loaded;
          }));
        }
      });
    });
    return Promise.all(promises);
  }
  /*!
   * vue-router-layout v0.1.5
   * Lightweight layout resolver for Vue Router.
   * https://github.com/ktsn/vue-router-layout
   *
   * @license
   * Copyright (c) 2018 katashin
   * Released under the MIT license
   * https://github.com/ktsn/vue-router-layout/blob/master/LICENSE
   */

  function initRouterLayout(resolve) {
    Model__default['default'].use(Router__default['default']);
    Model__default['default'].mixin({
      inject: {
        $_routerLayout_notifyRouteUpdate: {
          default: null
        }
      },
      beforeRouteUpdate: function beforeRouteUpdate(to, _from, next) {
        var _this = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var notify;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  notify = _this.$_routerLayout_notifyRouteUpdate;

                  if (!notify) {
                    _context.next = 4;
                    break;
                  }

                  _context.next = 4;
                  return notify(to);

                case 4:
                  next();

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      }
    });
    return Model__default['default'].extend({
      name: 'RouterLayout',
      data: function data() {
        return {
          layoutName: undefined,
          layouts: Object.create(null)
        };
      },
      watch: {
        layoutName: function layoutName(name) {
          if (!this.layouts[name]) {
            this.$set(this.layouts, name, function () {
              return resolve(name);
            });
          }
        }
      },
      provide: function provide() {
        var _this2 = this;

        return {
          $_routerLayout_notifyRouteUpdate: function () {
            var _$_routerLayout_notifyRouteUpdate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(to) {
              return regenerator.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return loadAsyncComponents(to);

                    case 2:
                      _this2.layoutName = resolveLayoutName(to.matched) || _this2.layoutName;

                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            }));

            function $_routerLayout_notifyRouteUpdate(_x) {
              return _$_routerLayout_notifyRouteUpdate.apply(this, arguments);
            }

            return $_routerLayout_notifyRouteUpdate;
          }()
        };
      },

      /**
       * Somehow, app can't be rendered when navigate back under micro app framework without this hook
       */
      mounted: function mounted() {
        var _this3 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!_this3.$router) {
                    _context3.next = 4;
                    break;
                  }

                  _context3.next = 3;
                  return loadAsyncComponents(_this3.$route);

                case 3:
                  _this3.layoutName = resolveLayoutName(_this3.$route.matched) || _this3.layoutName;

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      beforeRouteEnter: function beforeRouteEnter(to, _from, next) {
        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return loadAsyncComponents(to);

                case 2:
                  next(function (vm) {
                    vm.layoutName = resolveLayoutName(to.matched) || vm.layoutName;
                  });

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }))();
      },
      beforeRouteUpdate: function beforeRouteUpdate(to, _from, next) {
        var _this4 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return loadAsyncComponents(to);

                case 2:
                  _this4.layoutName = resolveLayoutName(to.matched) || _this4.layoutName;
                  next();

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }))();
      },
      render: function render(h) {
        var layout = this.layoutName && this.layouts[this.layoutName];

        if (!layout) {
          return h();
        }

        return h(layout, {
          key: this.layoutName
        });
      }
    });
  }

  /**
   * 整个应用框架接口应该有且仅有三种调用方式：
   *
   * 1. 通过应用实例调用，这应该是首选的调用方式，适合在应用入口或者 vue 文件中，具体如下：
   *    const app = hCore();
   *    app.ajax 或者 this.$hCore.ajax
   *
   * 2. 通过 hCore 函数对象调用，这应该可以覆盖非 vue 实例的场景，比如在一个普通的 js 文件中调用，具体如下：
   *    hCore.ajax
   *
   * 3. 通过 @hsui/core 暴露的接口调用，这样的接口应该是有限的，目前包括：
   *    - hCoreReference
   *    - initFetch
   *    - initRouter
   *    - initRouterLayout
   *
   * 4. 通过 @@/huiExports 动态扩展 @hsui/core
   */

  exports.hCoreReference = void 0;
  var hCoreOpts = {
    meta: {
      versions: {
        'hui-core': version,
        vue: Model__default['default'].version,
        'vue-router': Router__default['default'].version
      }
    }
  };
  function hCore(opts) {
    if (isPlainObject(opts)) {
      // 设置日志级别
      logger.setLevel(opts.logLevel || 'info'); // 合并元数据信息

      if (opts.meta) {
        for (var key in opts.meta) {
          if (Object.hasOwnProperty.call(opts.meta, key)) {
            if (key === 'versions') {
              hCoreOpts.meta.versions = _objectSpread2(_objectSpread2({}, hCoreOpts.meta.versions), opts.meta.versions);
            } else {
              hCoreOpts.meta[key] = opts.meta[key];
            }
          }
        }
      }

      opts.meta;
          var extra = _objectWithoutProperties(opts, ["meta"]);

      hCoreOpts = _objectSpread2(_objectSpread2({}, hCoreOpts), extra);
    }

    exports.hCoreReference = new HCore(hCoreOpts);
    log.debug('应用元数据信息', hCoreOpts.meta);
    log.debug('hCore 实例', exports.hCoreReference);
    log.debug('hCore 构建选项', hCoreOpts);
    return exports.hCoreReference;
  }
  sdk.setConfig({
    logger: logger
  }); // 支持扩展 HCore 的原型方法

  extend(hCore, {
    extend: function extend(opts) {
      // Handle case when target is a string or something (possible in deep copy)
      if (!isPlainObject(opts)) return false; // Extend the base object

      for (var name in opts) {
        if (Object.hasOwnProperty.call(opts, name)) {
          var copy = opts[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === '__proto__' || opts === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (copy && (isPlainObject(copy) || isArray(copy))) {
            // Handle a deep copy situation
            HCore.prototype[name] = deepClone(copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            HCore.prototype[name] = copy;
          }
        }
      }
    }
  });
  extend(hCore, {
    middleware: registerMiddleware
  });
  extend(hCore, {
    log: log,
    logger: logger
  });
  extend(hCore, {
    navigate: navigate,
    go: go
  });
  extend(hCore, {
    on: on,
    once: once,
    off: off,
    emit: emit,
    trigger: trigger
  });
  extend(hCore, {
    storage: sdk.storage
  });
  extend(hCore, {
    utils: utils
  });

  if (hCoreOpts['ajaxConfig'] || hCoreOpts['fetchConfig']) {
    var fetch = new Fetch(hCoreOpts['ajaxConfig'] || hCoreOpts['fetchConfig']);
    extend(hCore, {
      ajax: fetch,
      fetch: fetch
    });
  } else {
    var _fetch = new Fetch();

    extend(hCore, {
      ajax: _fetch,
      fetch: _fetch
    });
  }
  /** Legacy for bundler <= 1.3.4 */

  var initRouter = function initRouter(routes, opts) {
    return setRouterOpts(extend(opts, {
      routes: routes
    }));
  };

  exports.default = hCore;
  exports.initFetch = initFetch;
  exports.initRouter = initRouter;
  exports.initRouterLayout = initRouterLayout;
  exports.initRouterOptions = setRouterOpts;
  Object.keys(huiExports).forEach(function (k) {
    if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
      enumerable: true,
      get: function () {
        return huiExports[k];
      }
    });
  });

  Object.defineProperty(exports, '__esModule', { value: true });

})));
