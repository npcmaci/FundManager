import hCore, { hCoreReference } from '@hsui/core';

const defaultOpts = {
  // required opts
  Vue: null,
  appOptions: null,
  template: null,
  destroyRootInstanceWhen: null, // modify destroy timing programmatically
  destroyRootInstanceAtUnmount: true, // destroy instance at unmount
};

// 通过 app-start 获取启动回调
let appStartCallback = () => {};
const appStartedDeferred = new Promise((resolve) => {
  hCore.on('app-start', (cb) => {
    appStartCallback = cb;
    resolve();
  });
});

export default function singleSpaVue(userOpts) {
  if (typeof userOpts !== 'object') {
    throw new Error(`single-spa-vue requires a configuration object`);
  }

  const opts = {
    ...defaultOpts,
    ...userOpts,
  };

  if (!opts.Vue) {
    throw new Error('single-spa-vuejs must be passed opts.Vue');
  }

  if (!opts.appOptions) {
    throw new Error('single-spa-vuejs must be passed opts.appOptions');
  }

  if (opts.appOptions.hasOwnProperty('destroyRootInstanceWhen')) {
    opts.destroyRootInstanceWhen = opts.appOptions.destroyRootInstanceWhen;
  }

  if (opts.appOptions.hasOwnProperty('destroyRootInstanceAtUnmount')) {
    opts.destroyRootInstanceAtUnmount = opts.appOptions.destroyRootInstanceAtUnmount;
  }

  // Just a shared object to store the mounted object state
  let mountedInstances = {};

  return {
    bootstrap: bootstrap.bind(null, opts, mountedInstances),
    mount: mount.bind(null, opts, mountedInstances),
    unmount: unmount.bind(null, opts, mountedInstances),
    update: update.bind(null, opts, mountedInstances),
  };
}

function bootstrap(opts) {
  if (opts.loadRootComponent) {
    return opts.loadRootComponent().then((root) => (opts.rootComponent = root));
  } else {
    return Promise.resolve();
  }
}

async function mount(opts, mountedInstances, props) {
  // app resume
  if (mountedInstances.instance) {
    return Promise.resolve().then(() => {
      const { instance } = mountedInstances;
      let { el, router } = opts.appOptions;

      // Replace DOM element
      instance.$mount();
      el = document.querySelector(el);
      if (router) {
        let path =
          router.mode === 'history'
            ? window.location.pathname
            : router.mode === 'hash' && window.location.hash.slice(1);
        const { base } = router.options;
        if (router.mode === 'history' && base) {
          path = path.slice(base.length);
          path = path.startsWith('/') ? path : `/${path}`;
        }

        const pathname = path.indexOf('?') !== -1 ? path.slice(0, path.indexOf('?')) : path;

        if (pathname !== router.currentRoute.path) {
          el.parentNode.style.visibility = 'hidden';
          let unwatchroute = instance.$watch('$route', (val) => {
            instance.$nextTick(() => {
              instance.$el.parentNode.style.visibility = 'visible';
              unwatchroute();
            });
          });
        }
      }
      el.parentNode.replaceChild(instance.$el, el);

      // Trigger app resume
      hCore.trigger('app-resume', instance);

      // Navigate
      instance.$nextTick(() => {
        if (router) {
          let path =
            router.mode === 'history'
              ? window.location.pathname
              : router.mode === 'hash' && window.location.hash.slice(1);

          const { base } = router.options;
          if (router.mode === 'history' && base) {
            path = path.slice(base.length);
            path = path.startsWith('/') ? path : `/${path}`;
          }

          const { location } = router.resolve(path);

          if (instance.$hCore) {
            instance.$hCore.navigate(location.path, location.query);
          } else {
            router.push(location);
          }

          instance.$nextTick(() => {
            instance.$el.style.display = 'block';
          });
        }
      });
    });
  }

  // app start defer
  await appStartedDeferred;

  await new Promise((resolve) => {
    const appStart = () => {
      const appOptions = { ...opts.appOptions };
      if (props.domElement && !appOptions.el) {
        appOptions.el = props.domElement;
      }

      if (!appOptions.el) {
        throw new Error('single-spa-vuejs must be passed appOptions.el');
      }

      if (!appOptions.render && !appOptions.template && opts.rootComponent) {
        appOptions.render = (h) => h(opts.rootComponent);
      }

      if (!appOptions.data) {
        appOptions.data = {};
      }

      appOptions.data = { ...appOptions.data, ...props };

      mountedInstances.instance = new opts.Vue(appOptions);
      if (mountedInstances.instance.bind) {
        mountedInstances.instance = mountedInstances.instance.bind(mountedInstances.instance);
      }

      return mountedInstances.instance;
    };

    hCoreReference.root = appStart();
    hCoreReference.root.$nextTick(() => {
      resolve();
      hCore.trigger('app-ready', hCoreReference.root);
      appStartCallback && appStartCallback(hCoreReference.root);
    });
  });
}

function update(opts, mountedInstances, props) {
  return Promise.resolve().then(() => {
    const data = {
      ...(opts.appOptions.data || {}),
      ...props,
    };
    for (let prop in data) {
      mountedInstances.instance[prop] = data[prop];
    }
  });
}

function unmount(opts, mountedInstances) {
  return Promise.resolve().then(() => {
    const shouldDestroy = opts.destroyRootInstanceWhen
      ? opts.destroyRootInstanceWhen()
      : opts.destroyRootInstanceAtUnmount;

    if (shouldDestroy) {
      mountedInstances.instance.$destroy();
      mountedInstances.instance.$el.innerHTML = '';
      delete mountedInstances.instance;

      if (mountedInstances.domEl) {
        mountedInstances.domEl.innerHTML = '';
        delete mountedInstances.domEl;
      }
    } else {
      mountedInstances.instance.$el.style.display = 'none';
    }
  });
}
