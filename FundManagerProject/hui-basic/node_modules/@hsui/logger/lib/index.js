function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { extend, isNumber, isObject } from './utils';

var LogLevel = /*#__PURE__*/function () {
  function LogLevel() {
    var _this = this;

    var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'HUI';

    _classCallCheck(this, LogLevel);

    this.level = 'info';
    this.tagName = tagName; // walk levels, join to logger

    this.levels.forEach(function (level, index) {
      extend(_this, _defineProperty({}, level, function () {
        var _this2 = this;

        var userAgent = window.navigator.userAgent.toLowerCase();
        var isIE = userAgent.match(/msie/) != null || userAgent.match(/trident/) != null;
        var currentLevelIndex = this.levels.findIndex(function (level) {
          return level === _this2.level;
        }); // Fix: IE11,10 未开控制台时 console 为 native function 不支持 apply call 方法

        if (isIE) {
          return;
        }

        if (currentLevelIndex <= index) {
          for (var _len = arguments.length, content = new Array(_len), _key = 0; _key < _len; _key++) {
            content[_key] = arguments[_key];
          }

          console[level].apply(this, this._handleContent(level, content));
        }
      }));
    });
  }
  /**
   *
   * @param {*} level 日志级别
   * @param {*} content 消息体
   * @returns
   */


  _createClass(LogLevel, [{
    key: "levels",
    get: function get() {
      return ['trace', 'debug', 'info', 'warn', 'error'];
    }
  }, {
    key: "_handleContent",
    value: function _handleContent(level, content) {
      var logTime = dateFormat(new Date(), 'yyyy-MM-dd HH:mm:ss.S');
      var logLevel = level.toUpperCase();
      var prefix = "[".concat(this.tagName, "] [").concat(logTime, "] [").concat(logLevel, "]");
      var formatLog = content.reduce(function (total, value) {
        if (isNumber(value)) {
          return total + " %d";
        }

        if (isObject(value)) {
          return total + " %o";
        }

        return total + " %s";
      }, prefix);
      return [formatLog].concat(_toConsumableArray(content));
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      if (this.levels.includes(level)) {
        this.level = level;
      }
    }
  }]);

  return LogLevel;
}();
/**
 *
 * @param {String} tagName 日志标签
 * @returns
 */


export { LogLevel as default };
export function createLogger(tagName) {
  return new LogLevel(tagName);
}
/**
 * 日期格式化
 * date: 日期对象
 * format：时间格式
 * 引用 deteFormat(new Date("2016-05-05 12:23:26"),"yyyy-MM-dd HH:mm:ss")
 */

function dateFormat(date, format) {
  var o = {
    'M+': date.getMonth() + 1,
    //月份
    'd+': date.getDate(),
    //日
    'H+': date.getHours(),
    //小时
    'm+': date.getMinutes(),
    //分
    's+': date.getSeconds(),
    //秒
    'q+': Math.floor((date.getMonth() + 3) / 3),
    //季度
    S: date.getMilliseconds() //毫秒

  };

  if (/(y+)/.test(format)) {
    format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
  }

  for (var k in o) {
    if (new RegExp('(' + k + ')').test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
  }

  return format;
}