(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.sdk = {}));
}(this, (function (exports) { 'use strict';

  var errors = {
    INVALID_KEY: 'invalid ${ key }',
    INVALID_PARAMETERS: 'invalid parameters',
    INVALID_REQUEST: 'invalid request',
    INVALID_SDK_CALL: 'invalid sdk call ${ method }',
    NOT_FOUND: '${ key } not found',
    UNKNOWN_ERROR: 'unknown error'
  };
  function runningError() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'UNKNOWN_ERROR';
    var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (errors.hasOwnProperty(type)) {
      return tpl(errors[type])(payload);
    }

    return tpl(errors['UNKNOWN_ERROR'])();
  }

  function tpl(string) {
    return function (params) {
      Object.keys(params).forEach(function (key) {
        string = string.replace('${ ' + key + ' }', params[key]);
      });
      return string;
    };
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function isObject$1(value) {
    var type = _typeof(value);

    return value != null && (type == 'object' || type == 'function');
  }
  /**
   * Redux isPlainObject
   */

  function isPlainObject$1(obj) {
    if (_typeof(obj) !== 'object' || obj === null) return false;
    var proto = obj;

    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(obj) === proto;
  }

  function getPlatform() {
    if (isUcf()) {
      return 'ucf';
    } else {
      return 'web';
    }
  }
  function isUcf() {
    var pattern = /ucf/;

    if (navigator && pattern.test(navigator.userAgent.toLowerCase())) {
      // 增加跨平台的保护，避免客户端没有实现 ucf 的跨平台接口
      return window.usdk ? true : false;
    } else {
      return false;
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var isArray$1 = Array.isArray;
  function report(error_code, error_message, extra) {
    return _objectSpread2({
      error_code: error_code,
      error_message: isArray$1(error_message) && error_message.length ? error_message[0] : error_message
    }, isPlainObject$1(extra) ? extra : {});
  }

  var ajaxSchema = {
    type: 'object',
    properties: {
      url: {
        type: 'string',
        required: true
      },
      method: {
        type: 'string',
        enum: ['get', 'post']
      },
      data: {
        type: ['string', 'number', 'object']
      },
      timeout: {
        type: 'number'
      },
      headers: {
        type: 'object'
      }
    }
  };
  var storageSchema = {
    type: 'object',
    properties: {
      key: {
        type: 'string',
        required: true
      },
      value: {
        type: ['string', 'number', 'object']
      },
      scope: {
        type: 'string'
      }
    }
  };

  var jsonpointer = {};

  var hasExcape = /~/;
  var escapeMatcher = /~[01]/g;
  function escapeReplacer (m) {
    switch (m) {
      case '~1': return '/'
      case '~0': return '~'
    }
    throw new Error('Invalid tilde escape: ' + m)
  }

  function untilde (str) {
    if (!hasExcape.test(str)) return str
    return str.replace(escapeMatcher, escapeReplacer)
  }

  function setter (obj, pointer, value) {
    var part;
    var hasNextPart;

    if (pointer[1] === 'constructor' && pointer[2] === 'prototype') return obj
    if (pointer[1] === '__proto__') return obj

    for (var p = 1, len = pointer.length; p < len;) {
      part = untilde(pointer[p++]);
      hasNextPart = len > p;

      if (typeof obj[part] === 'undefined') {
        // support setting of /-
        if (Array.isArray(obj) && part === '-') {
          part = obj.length;
        }

        // support nested objects/array when setting values
        if (hasNextPart) {
          if ((pointer[p] !== '' && pointer[p] < Infinity) || pointer[p] === '-') obj[part] = [];
          else obj[part] = {};
        }
      }

      if (!hasNextPart) break
      obj = obj[part];
    }

    var oldValue = obj[part];
    if (value === undefined) delete obj[part];
    else obj[part] = value;
    return oldValue
  }

  function compilePointer (pointer) {
    if (typeof pointer === 'string') {
      pointer = pointer.split('/');
      if (pointer[0] === '') return pointer
      throw new Error('Invalid JSON pointer.')
    } else if (Array.isArray(pointer)) {
      return pointer
    }

    throw new Error('Invalid JSON pointer.')
  }

  function get (obj, pointer) {
    if (typeof obj !== 'object') throw new Error('Invalid input object.')
    pointer = compilePointer(pointer);
    var len = pointer.length;
    if (len === 1) return obj

    for (var p = 1; p < len;) {
      obj = obj[untilde(pointer[p++])];
      if (len === p) return obj
      if (typeof obj !== 'object') return undefined
    }
  }

  function set (obj, pointer, value) {
    if (typeof obj !== 'object') throw new Error('Invalid input object.')
    pointer = compilePointer(pointer);
    if (pointer.length === 0) throw new Error('Invalid JSON pointer for set.')
    return setter(obj, pointer, value)
  }

  function compile (pointer) {
    var compiled = compilePointer(pointer);
    return {
      get: function (object) {
        return get(object, compiled)
      },
      set: function (object, value) {
        return set(object, compiled, value)
      }
    }
  }

  jsonpointer.get = get;
  jsonpointer.set = set;
  jsonpointer.compile = compile;

  var isMyJsonValid = {exports: {}};

  function isProperty$2(str) {
    return /^[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*$/.test(str)
  }
  var isProperty_1 = isProperty$2;

  var isProperty$1 = isProperty_1;

  var gen = function(obj, prop) {
    return isProperty$1(prop) ? obj+'.'+prop : obj+'['+JSON.stringify(prop)+']'
  };

  gen.valid = isProperty$1;
  gen.property = function (prop) {
   return isProperty$1(prop) ? prop : JSON.stringify(prop)
  };

  var generateObjectProperty = gen;

  var util$1 = {};

  var isBufferBrowser = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  };

  var inherits_browser = {exports: {}};

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    inherits_browser.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    inherits_browser.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }

  (function (exports) {
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
    function getOwnPropertyDescriptors(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    if (typeof process !== 'undefined' && process.noDeprecation === true) {
      return fn;
    }

    // Allow for deprecating things in the process of starting up.
    if (typeof process === 'undefined') {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = isBufferBrowser;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = inherits_browser.exports;

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

  exports.promisify = function promisify(original) {
    if (typeof original !== 'function')
      throw new TypeError('The "original" argument must be of type Function');

    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
      var fn = original[kCustomPromisifiedSymbol];
      if (typeof fn !== 'function') {
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      }
      Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn, enumerable: false, writable: false, configurable: true
      });
      return fn;
    }

    function fn() {
      var promiseResolve, promiseReject;
      var promise = new Promise(function (resolve, reject) {
        promiseResolve = resolve;
        promiseReject = reject;
      });

      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      args.push(function (err, value) {
        if (err) {
          promiseReject(err);
        } else {
          promiseResolve(value);
        }
      });

      try {
        original.apply(this, args);
      } catch (err) {
        promiseReject(err);
      }

      return promise;
    }

    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return Object.defineProperties(
      fn,
      getOwnPropertyDescriptors(original)
    );
  };

  exports.promisify.custom = kCustomPromisifiedSymbol;

  function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
      var newReason = new Error('Promise was rejected with a falsy value');
      newReason.reason = reason;
      reason = newReason;
    }
    return cb(reason);
  }

  function callbackify(original) {
    if (typeof original !== 'function') {
      throw new TypeError('The "original" argument must be of type Function');
    }

    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
      var args = [];
      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }

      var maybeCb = args.pop();
      if (typeof maybeCb !== 'function') {
        throw new TypeError('The last argument must be of type Function');
      }
      var self = this;
      var cb = function() {
        return maybeCb.apply(self, arguments);
      };
      // In true node style we process the callback on `nextTick` with all the
      // implications (stack, `uncaughtException`, `async_hooks`)
      original.apply(this, args)
        .then(function(ret) { process.nextTick(cb, null, ret); },
              function(rej) { process.nextTick(callbackifyOnRejected, rej, cb); });
    }

    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified,
                            getOwnPropertyDescriptors(original));
    return callbackified;
  }
  exports.callbackify = callbackify;
  }(util$1));

  var util = util$1;
  var isProperty = isProperty_1;

  var INDENT_START = /[\{\[]/;
  var INDENT_END = /[\}\]]/;

  // from https://mathiasbynens.be/notes/reserved-keywords
  var RESERVED = [
    'do',
    'if',
    'in',
    'for',
    'let',
    'new',
    'try',
    'var',
    'case',
    'else',
    'enum',
    'eval',
    'null',
    'this',
    'true',
    'void',
    'with',
    'await',
    'break',
    'catch',
    'class',
    'const',
    'false',
    'super',
    'throw',
    'while',
    'yield',
    'delete',
    'export',
    'import',
    'public',
    'return',
    'static',
    'switch',
    'typeof',
    'default',
    'extends',
    'finally',
    'package',
    'private',
    'continue',
    'debugger',
    'function',
    'arguments',
    'interface',
    'protected',
    'implements',
    'instanceof',
    'NaN',
    'undefined'
  ];

  var RESERVED_MAP = {};

  for (var i = 0; i < RESERVED.length; i++) {
    RESERVED_MAP[RESERVED[i]] = true;
  }

  var isVariable = function (name) {
    return isProperty(name) && !RESERVED_MAP.hasOwnProperty(name)
  };

  var formats$1 = {
    s: function(s) {
      return '' + s
    },
    d: function(d) {
      return '' + Number(d)
    },
    o: function(o) {
      return JSON.stringify(o)
    }
  };

  var genfun = function() {
    var lines = [];
    var indent = 0;
    var vars = {};

    var push = function(str) {
      var spaces = '';
      while (spaces.length < indent*2) spaces += '  ';
      lines.push(spaces+str);
    };

    var pushLine = function(line) {
      if (INDENT_END.test(line.trim()[0]) && INDENT_START.test(line[line.length-1])) {
        indent--;
        push(line);
        indent++;
        return
      }
      if (INDENT_START.test(line[line.length-1])) {
        push(line);
        indent++;
        return
      }
      if (INDENT_END.test(line.trim()[0])) {
        indent--;
        push(line);
        return
      }

      push(line);
    };

    var line = function(fmt) {
      if (!fmt) return line

      if (arguments.length === 1 && fmt.indexOf('\n') > -1) {
        var lines = fmt.trim().split('\n');
        for (var i = 0; i < lines.length; i++) {
          pushLine(lines[i].trim());
        }
      } else {
        pushLine(util.format.apply(util, arguments));
      }

      return line
    };

    line.scope = {};
    line.formats = formats$1;

    line.sym = function(name) {
      if (!name || !isVariable(name)) name = 'tmp';
      if (!vars[name]) vars[name] = 0;
      return name + (vars[name]++ || '')
    };

    line.property = function(obj, name) {
      if (arguments.length === 1) {
        name = obj;
        obj = '';
      }

      name = name + '';

      if (isProperty(name)) return (obj ? obj + '.' + name : name)
      return obj ? obj + '[' + JSON.stringify(name) + ']' : JSON.stringify(name)
    };

    line.toString = function() {
      return lines.join('\n')
    };

    line.toFunction = function(scope) {
      if (!scope) scope = {};

      var src = 'return ('+line.toString()+')';

      Object.keys(line.scope).forEach(function (key) {
        if (!scope[key]) scope[key] = line.scope[key];
      });

      var keys = Object.keys(scope).map(function(key) {
        return key
      });

      var vals = keys.map(function(key) {
        return scope[key]
      });

      return Function.apply(null, keys.concat(src)).apply(null, vals)
    };

    if (arguments.length) line.apply(null, arguments);

    return line
  };

  genfun.formats = formats$1;
  var generateFunction = genfun;

  var immutable = extend$1;

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function extend$1() {
      var target = {};

      for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
              }
          }
      }

      return target
  }

  var formats = {};

  var isMyIpValid = {exports: {}};

  (function (module) {
  var reIpv4FirstPass = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;

  var reSubnetString = /\/\d{1,3}(?=%|$)/;
  var reForwardSlash = /\//;
  var reZone = /%.*$/;
  var reBadCharacters = /([^0-9a-f:/%])/i;
  var reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/i;

  function validate4 (input) {
    if (!(reIpv4FirstPass.test(input))) return false

    var parts = input.split('.');

    if (parts.length !== 4) return false

    if (parts[0][0] === '0' && parts[0].length > 1) return false
    if (parts[1][0] === '0' && parts[1].length > 1) return false
    if (parts[2][0] === '0' && parts[2].length > 1) return false
    if (parts[3][0] === '0' && parts[3].length > 1) return false

    var n0 = Number(parts[0]);
    var n1 = Number(parts[1]);
    var n2 = Number(parts[2]);
    var n3 = Number(parts[3]);

    return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)
  }

  function validate6 (input) {
    var withoutSubnet = input.replace(reSubnetString, '');
    var hasSubnet = (input.length !== withoutSubnet.length);

    // FIXME: this should probably be an option in the future
    if (hasSubnet) return false

    if (!hasSubnet) {
      if (reForwardSlash.test(input)) return false
    }

    var withoutZone = withoutSubnet.replace(reZone, '');
    var lastPartSeparator = withoutZone.lastIndexOf(':');

    if (lastPartSeparator === -1) return false

    var lastPart = withoutZone.substring(lastPartSeparator + 1);
    var hasV4Part = validate4(lastPart);
    var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone);

    if (reBadCharacters.test(address)) return false
    if (reBadAddress.test(address)) return false

    var halves = address.split('::');

    if (halves.length > 2) return false

    if (halves.length === 2) {
      var first = (halves[0] === '' ? [] : halves[0].split(':'));
      var last = (halves[1] === '' ? [] : halves[1].split(':'));
      var remainingLength = 8 - (first.length + last.length);

      if (remainingLength <= 0) return false
    } else {
      if (address.split(':').length !== 8) return false
    }

    return true
  }

  function validate (input) {
    return validate4(input) || validate6(input)
  }

  module.exports = function validator (options) {
    if (!options) options = {};

    if (options.version === 4) return validate4
    if (options.version === 6) return validate6
    if (options.version == null) return validate

    throw new Error('Unknown version: ' + options.version)
  };

  module.exports['__all_regexes__'] = [
    reIpv4FirstPass,
    reSubnetString,
    reForwardSlash,
    reZone,
    reBadCharacters,
    reBadAddress
  ];
  }(isMyIpValid));

  (function (exports) {
  var createIpValidator = isMyIpValid.exports;

  var reEmailWhitespace = /\s/;
  var reHostnameFirstPass = /^[a-zA-Z0-9.-]+$/;
  var reHostnamePart = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/;
  var rePhoneFirstPass = /^\+[0-9][0-9 ]{5,27}[0-9]$/;
  var rePhoneDoubleSpace = / {2}/;
  var rePhoneGlobalSpace = / /g;

  exports['date-time'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}[tT ]\d{2}:\d{2}:\d{2}(?:\.\d+|)([zZ]|[+-]\d{2}:\d{2})$/;
  exports['date'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}$/;
  exports['time'] = /^\d{2}:\d{2}:\d{2}$/;
  exports['email'] = function (input) { return (input.indexOf('@') !== -1) && (!reEmailWhitespace.test(input)) };
  exports['ip-address'] = exports['ipv4'] = createIpValidator({ version: 4 });
  exports['ipv6'] = createIpValidator({ version: 6 });
  exports['uri'] = /^[a-zA-Z][a-zA-Z0-9+\-.]*:[^\s]*$/;
  exports['color'] = /(#?([0-9A-Fa-f]{3,6})\b)|(aqua)|(black)|(blue)|(fuchsia)|(gray)|(green)|(lime)|(maroon)|(navy)|(olive)|(orange)|(purple)|(red)|(silver)|(teal)|(white)|(yellow)|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\))/;
  exports['hostname'] = function (input) {
    if (!(reHostnameFirstPass.test(input))) return false

    var parts = input.split('.');

    for (var i = 0; i < parts.length; i++) {
      if (!(reHostnamePart.test(parts[i]))) return false
    }

    return true
  };
  exports['alpha'] = /^[a-zA-Z]+$/;
  exports['alphanumeric'] = /^[a-zA-Z0-9]+$/;
  exports['style'] = /.:\s*[^;]/g;
  exports['phone'] = function (input) {
    if (!(rePhoneFirstPass.test(input))) return false
    if (rePhoneDoubleSpace.test(input)) return false

    var digits = input.substring(1).replace(rePhoneGlobalSpace, '').length;

    return (digits >= 7 && digits <= 15)
  };
  exports['utc-millisec'] = /^[0-9]{1,15}\.?[0-9]{0,15}$/;
  }(formats));

  (function (module) {
  var genobj = generateObjectProperty;
  var genfun = generateFunction;
  var jsonpointer$1 = jsonpointer;
  var xtend = immutable;
  var formats$1 = formats;

  var get = function(obj, additionalSchemas, ptr) {

    var visit = function(sub) {
      if (sub && sub.id === ptr) return sub
      if (typeof sub !== 'object' || !sub) return null
      return Object.keys(sub).reduce(function(res, k) {
        return res || visit(sub[k])
      }, null)
    };

    var res = visit(obj);
    if (res) return res

    ptr = ptr.replace(/^#/, '');
    ptr = ptr.replace(/\/$/, '');

    try {
      return jsonpointer$1.get(obj, decodeURI(ptr))
    } catch (err) {
      var end = ptr.indexOf('#');
      var other;
      // external reference
      if (end !== 0) {
        // fragment doesn't exist.
        if (end === -1) {
          other = additionalSchemas[ptr];
        } else {
          var ext = ptr.slice(0, end);
          other = additionalSchemas[ext];
          var fragment = ptr.slice(end).replace(/^#/, '');
          try {
            return jsonpointer$1.get(other, fragment)
          } catch (err) {}
        }
      } else {
        other = additionalSchemas[ptr];
      }
      return other || null
    }
  };

  var types = {};

  types.any = function() {
    return 'true'
  };

  types.null = function(name) {
    return name+' === null'
  };

  types.boolean = function(name) {
    return 'typeof '+name+' === "boolean"'
  };

  types.array = function(name) {
    return 'Array.isArray('+name+')'
  };

  types.object = function(name) {
    return 'typeof '+name+' === "object" && '+name+' && !Array.isArray('+name+')'
  };

  types.number = function(name) {
    return 'typeof '+name+' === "number" && isFinite('+name+')'
  };

  types.integer = function(name) {
    return 'typeof '+name+' === "number" && (Math.floor('+name+') === '+name+' || '+name+' > 9007199254740992 || '+name+' < -9007199254740992)'
  };

  types.string = function(name) {
    return 'typeof '+name+' === "string"'
  };

  var unique = function(array, len) {
    len = Math.min(len === -1 ? array.length : len, array.length);
    var list = [];
    for (var i = 0; i < len; i++) {
      list.push(typeof array[i] === 'object' ? JSON.stringify(array[i]) : array[i]);
    }
    for (var i = 1; i < list.length; i++) {
      if (list.indexOf(list[i]) !== i) return false
    }
    return true
  };

  var isMultipleOf = function(name, multipleOf) {
    var res;
    var factor = ((multipleOf | 0) !== multipleOf) ? Math.pow(10, multipleOf.toString().split('.').pop().length) : 1;
    if (factor > 1) {
      var factorName = ((name | 0) !== name) ? Math.pow(10, name.toString().split('.').pop().length) : 1;
      if (factorName > factor) res = true;
      else res = Math.round(factor * name) % (factor * multipleOf);
    }
    else res = name % multipleOf;
    return !res;
  };

  var testLimitedRegex = function (r, s, maxLength) {
    if (maxLength > -1 && s.length > maxLength) return true
    return r.test(s)
  };

  var compile = function(schema, cache, root, reporter, opts) {
    var fmts = opts ? xtend(formats$1, opts.formats) : formats$1;
    var scope = {unique:unique, formats:fmts, isMultipleOf:isMultipleOf, testLimitedRegex:testLimitedRegex};
    var verbose = opts ? !!opts.verbose : false;
    var greedy = opts && opts.greedy !== undefined ?
      opts.greedy : false;

    var syms = {};
    var allocated = [];
    var gensym = function(name) {
      var res = name+(syms[name] = (syms[name] || 0)+1);
      allocated.push(res);
      return res
    };

    var formatName = function(field) {
      var s = JSON.stringify(field);
      try {
        var pattern = /\[([^\[\]"]+)\]/;
        while (pattern.test(s)) s = s.replace(pattern, replacer);
        return s
      } catch (_) {
        return JSON.stringify(field)
      }

      function replacer (match, v) {
        if (allocated.indexOf(v) === -1) throw new Error('Unreplaceable')
        return '." + ' + v + ' + "'
      }
    };

    var reversePatterns = {};
    var patterns = function(p) {
      if (reversePatterns[p]) return reversePatterns[p]
      var n = gensym('pattern');
      scope[n] = new RegExp(p);
      reversePatterns[p] = n;
      return n
    };

    var vars = ['i','j','k','l','m','n','o','p','q','r','s','t','u','v','x','y','z'];
    var genloop = function() {
      var v = vars.shift();
      vars.push(v+v[0]);
      allocated.push(v);
      return v
    };

    var visit = function(name, node, reporter, filter, schemaPath) {
      var properties = node.properties;
      var type = node.type;
      var tuple = false;

      if (Array.isArray(node.items)) { // tuple type
        properties = {};
        node.items.forEach(function(item, i) {
          properties[i] = item;
        });
        type = 'array';
        tuple = true;
      }

      var indent = 0;
      var error = function(msg, prop, value) {
        validate('errors++');
        if (reporter === true) {
          validate('if (validate.errors === null) validate.errors = []');
          if (verbose) {
            validate(
              'validate.errors.push({field:%s,message:%s,value:%s,type:%s,schemaPath:%s})',
              formatName(prop || name),
              JSON.stringify(msg),
              value || name,
              JSON.stringify(type),
              JSON.stringify(schemaPath)
            );
          } else {
            validate('validate.errors.push({field:%s,message:%s})', formatName(prop || name), JSON.stringify(msg));
          }
        }
      };

      if (node.required === true) {
        indent++;
        validate('if (%s === undefined) {', name);
        error('is required');
        validate('} else {');
      } else {
        indent++;
        validate('if (%s !== undefined) {', name);
      }

      var valid = [].concat(type)
        .map(function(t) {
          if (t && !types.hasOwnProperty(t)) {
            throw new Error('Unknown type: ' + t)
          }

          return types[t || 'any'](name)
        })
        .join(' || ') || 'true';

      if (valid !== 'true') {
        indent++;
        validate('if (!(%s)) {', valid);
        error('is the wrong type');
        validate('} else {');
      }

      if (tuple) {
        if (node.additionalItems === false) {
          validate('if (%s.length > %d) {', name, node.items.length);
          error('has additional items');
          validate('}');
        } else if (node.additionalItems) {
          var i = genloop();
          validate('for (var %s = %d; %s < %s.length; %s++) {', i, node.items.length, i, name, i);
          visit(name+'['+i+']', node.additionalItems, reporter, filter, schemaPath.concat('additionalItems'));
          validate('}');
        }
      }

      if (node.format && fmts[node.format]) {
        if (type !== 'string' && formats$1[node.format]) validate('if (%s) {', types.string(name));
        var n = gensym('format');
        scope[n] = fmts[node.format];

        if (typeof scope[n] === 'function') validate('if (!%s(%s)) {', n, name);
        else validate('if (!testLimitedRegex(%s, %s, %d)) {', n, name, typeof node.maxLength === 'undefined' ? -1 : node.maxLength);
        error('must be '+node.format+' format');
        validate('}');
        if (type !== 'string' && formats$1[node.format]) validate('}');
      }

      if (Array.isArray(node.required)) {
        var n = gensym('missing');
        validate('var %s = 0', n);
        var checkRequired = function (req) {
          var prop = genobj(name, req);
          validate('if (%s === undefined) {', prop);
          error('is required', prop);
          validate('%s++', n);
          validate('}');
        };
        validate('if ((%s)) {', type !== 'object' ? types.object(name) : 'true');
        node.required.map(checkRequired);
        validate('}');
        if (!greedy) {
          validate('if (%s === 0) {', n);
          indent++;
        }
      }

      if (node.uniqueItems) {
        if (type !== 'array') validate('if (%s) {', types.array(name));
        validate('if (!(unique(%s, %d))) {', name, node.maxItems || -1);
        error('must be unique');
        validate('}');
        if (type !== 'array') validate('}');
      }

      if (node.enum) {
        var complex = node.enum.some(function(e) {
          return typeof e === 'object'
        });

        var compare = complex ?
          function(e) {
            return 'JSON.stringify('+name+')'+' !== JSON.stringify('+JSON.stringify(e)+')'
          } :
          function(e) {
            return name+' !== '+JSON.stringify(e)
          };

        validate('if (%s) {', node.enum.map(compare).join(' && ') || 'false');
        error('must be an enum value');
        validate('}');
      }

      if (node.dependencies) {
        if (type !== 'object') validate('if (%s) {', types.object(name));

        Object.keys(node.dependencies).forEach(function(key) {
          var deps = node.dependencies[key];
          if (typeof deps === 'string') deps = [deps];

          var exists = function(k) {
            return genobj(name, k) + ' !== undefined'
          };

          if (Array.isArray(deps)) {
            validate('if (%s !== undefined && !(%s)) {', genobj(name, key), deps.map(exists).join(' && ') || 'true');
            error('dependencies not set');
            validate('}');
          }
          if (typeof deps === 'object') {
            validate('if (%s !== undefined) {', genobj(name, key));
            visit(name, deps, reporter, filter, schemaPath.concat(['dependencies', key]));
            validate('}');
          }
        });

        if (type !== 'object') validate('}');
      }

      if (node.additionalProperties || node.additionalProperties === false) {
        if (type !== 'object') validate('if (%s) {', types.object(name));

        var i = genloop();
        var keys = gensym('keys');

        var toCompare = function(p) {
          return keys+'['+i+'] !== '+JSON.stringify(p)
        };

        var toTest = function(p) {
          return '!'+patterns(p)+'.test('+keys+'['+i+'])'
        };

        var additionalProp = Object.keys(properties || {}).map(toCompare)
          .concat(Object.keys(node.patternProperties || {}).map(toTest))
          .join(' && ') || 'true';

        validate('var %s = Object.keys(%s)', keys, name)
          ('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i)
            ('if (%s) {', additionalProp);

        if (node.additionalProperties === false) {
          if (filter) validate('delete %s', name+'['+keys+'['+i+']]');
          error('has additional properties', null, JSON.stringify(name+'.') + ' + ' + keys + '['+i+']');
        } else {
          visit(name+'['+keys+'['+i+']]', node.additionalProperties, reporter, filter, schemaPath.concat(['additionalProperties']));
        }

        validate
            ('}')
          ('}');

        if (type !== 'object') validate('}');
      }

      if (node.$ref) {
        var sub = get(root, opts && opts.schemas || {}, node.$ref);
        if (sub) {
          var fn = cache[node.$ref];
          if (!fn) {
            cache[node.$ref] = function proxy(data) {
              return fn(data)
            };
            fn = compile(sub, cache, root, false, opts);
          }
          var n = gensym('ref');
          scope[n] = fn;
          validate('if (!(%s(%s))) {', n, name);
          error('referenced schema does not match');
          validate('}');
        }
      }

      if (node.not) {
        var prev = gensym('prev');
        validate('var %s = errors', prev);
        visit(name, node.not, false, filter, schemaPath.concat('not'));
        validate('if (%s === errors) {', prev);
        error('negative schema matches');
        validate('} else {')
          ('errors = %s', prev)
        ('}');
      }

      if (node.items && !tuple) {
        if (type !== 'array') validate('if (%s) {', types.array(name));

        var i = genloop();
        validate('for (var %s = 0; %s < %s.length; %s++) {', i, i, name, i);
        visit(name+'['+i+']', node.items, reporter, filter, schemaPath.concat('items'));
        validate('}');

        if (type !== 'array') validate('}');
      }

      if (node.patternProperties) {
        if (type !== 'object') validate('if (%s) {', types.object(name));
        var keys = gensym('keys');
        var i = genloop();
        validate
          ('var %s = Object.keys(%s)', keys, name)
          ('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i);

        Object.keys(node.patternProperties).forEach(function(key) {
          var p = patterns(key);
          validate('if (%s.test(%s)) {', p, keys+'['+i+']');
          visit(name+'['+keys+'['+i+']]', node.patternProperties[key], reporter, filter, schemaPath.concat(['patternProperties', key]));
          validate('}');
        });

        validate('}');
        if (type !== 'object') validate('}');
      }

      if (node.pattern) {
        var p = patterns(node.pattern);
        if (type !== 'string') validate('if (%s) {', types.string(name));
        validate('if (!(testLimitedRegex(%s, %s, %d))) {', p, name, typeof node.maxLength === 'undefined' ? -1 : node.maxLength);
        error('pattern mismatch');
        validate('}');
        if (type !== 'string') validate('}');
      }

      if (node.allOf) {
        node.allOf.forEach(function(sch, key) {
          visit(name, sch, reporter, filter, schemaPath.concat(['allOf', key]));
        });
      }

      if (node.anyOf && node.anyOf.length) {
        var prev = gensym('prev');

        node.anyOf.forEach(function(sch, i) {
          if (i === 0) {
            validate('var %s = errors', prev);
          } else {
            validate('if (errors !== %s) {', prev)
              ('errors = %s', prev);
          }
          visit(name, sch, false, false, schemaPath);
        });
        node.anyOf.forEach(function(sch, i) {
          if (i) validate('}');
        });
        validate('if (%s !== errors) {', prev);
        error('no schemas match');
        validate('}');
      }

      if (node.oneOf && node.oneOf.length) {
        var prev = gensym('prev');
        var passes = gensym('passes');

        validate
          ('var %s = errors', prev)
          ('var %s = 0', passes);

        node.oneOf.forEach(function(sch, i) {
          visit(name, sch, false, false, schemaPath);
          validate('if (%s === errors) {', prev)
            ('%s++', passes)
          ('} else {')
            ('errors = %s', prev)
          ('}');
        });

        validate('if (%s !== 1) {', passes);
        error('no (or more than one) schemas match');
        validate('}');
      }

      if (node.multipleOf !== undefined) {
        if (type !== 'number' && type !== 'integer') validate('if (%s) {', types.number(name));

        validate('if (!isMultipleOf(%s, %d)) {', name, node.multipleOf);

        error('has a remainder');
        validate('}');

        if (type !== 'number' && type !== 'integer') validate('}');
      }

      if (node.maxProperties !== undefined) {
        if (type !== 'object') validate('if (%s) {', types.object(name));

        validate('if (Object.keys(%s).length > %d) {', name, node.maxProperties);
        error('has more properties than allowed');
        validate('}');

        if (type !== 'object') validate('}');
      }

      if (node.minProperties !== undefined) {
        if (type !== 'object') validate('if (%s) {', types.object(name));

        validate('if (Object.keys(%s).length < %d) {', name, node.minProperties);
        error('has less properties than allowed');
        validate('}');

        if (type !== 'object') validate('}');
      }

      if (node.maxItems !== undefined) {
        if (type !== 'array') validate('if (%s) {', types.array(name));

        validate('if (%s.length > %d) {', name, node.maxItems);
        error('has more items than allowed');
        validate('}');

        if (type !== 'array') validate('}');
      }

      if (node.minItems !== undefined) {
        if (type !== 'array') validate('if (%s) {', types.array(name));

        validate('if (%s.length < %d) {', name, node.minItems);
        error('has less items than allowed');
        validate('}');

        if (type !== 'array') validate('}');
      }

      if (node.maxLength !== undefined) {
        if (type !== 'string') validate('if (%s) {', types.string(name));

        validate('if (%s.length > %d) {', name, node.maxLength);
        error('has longer length than allowed');
        validate('}');

        if (type !== 'string') validate('}');
      }

      if (node.minLength !== undefined) {
        if (type !== 'string') validate('if (%s) {', types.string(name));

        validate('if (%s.length < %d) {', name, node.minLength);
        error('has less length than allowed');
        validate('}');

        if (type !== 'string') validate('}');
      }

      if (node.minimum !== undefined) {
        if (type !== 'number' && type !== 'integer') validate('if (%s) {', types.number(name));

        validate('if (%s %s %d) {', name, node.exclusiveMinimum ? '<=' : '<', node.minimum);
        error('is less than minimum');
        validate('}');

        if (type !== 'number' && type !== 'integer') validate('}');
      }

      if (node.maximum !== undefined) {
        if (type !== 'number' && type !== 'integer') validate('if (%s) {', types.number(name));

        validate('if (%s %s %d) {', name, node.exclusiveMaximum ? '>=' : '>', node.maximum);
        error('is more than maximum');
        validate('}');

        if (type !== 'number' && type !== 'integer') validate('}');
      }

      if (properties) {
        Object.keys(properties).forEach(function(p) {
          if (Array.isArray(type) && type.indexOf('null') !== -1) validate('if (%s !== null) {', name);

          visit(
            genobj(name, p),
            properties[p],
            reporter,
            filter,
            schemaPath.concat(tuple ? p : ['properties', p])
          );

          if (Array.isArray(type) && type.indexOf('null') !== -1) validate('}');
        });
      }

      while (indent--) validate('}');
    };

    var validate = genfun
      ('function validate(data) {')
        // Since undefined is not a valid JSON value, we coerce to null and other checks will catch this
        ('if (data === undefined) data = null')
        ('validate.errors = null')
        ('var errors = 0');

    visit('data', schema, reporter, opts && opts.filter, []);

    validate
        ('return errors === 0')
      ('}');

    validate = validate.toFunction(scope);
    validate.errors = null;

    if (Object.defineProperty) {
      Object.defineProperty(validate, 'error', {
        get: function() {
          if (!validate.errors) return ''
          return validate.errors.map(function(err) {
            return err.field + ' ' + err.message;
          }).join('\n')
        }
      });
    }

    validate.toJSON = function() {
      return schema
    };

    return validate
  };

  module.exports = function(schema, opts) {
    if (typeof schema === 'string') schema = JSON.parse(schema);
    return compile(schema, {}, schema, true, opts)
  };

  module.exports.filter = function(schema, opts) {
    var validate = module.exports(schema, xtend(opts, {filter: true}));
    return function(sch) {
      validate(sch);
      return sch
    }
  };
  }(isMyJsonValid));

  var validator = isMyJsonValid.exports;

  function validate(schema, data) {
    var it = validator(schema, {
      verbose: true
    });
    it(data);
    var errors = it.errors;

    if (errors) {
      errors = errors.map(function (_ref) {
        var field = _ref.field,
            message = _ref.message;
            _ref.value;
            var type = _ref.type,
            schemaPath = _ref.schemaPath;
        var property = field.replace('data.', '');

        if (Array.isArray(type)) {
          type = type.join();
        }

        if (message === 'is required') {
          return "".concat(property, " is required");
        }

        if (message === 'is the wrong type') {
          return "".concat(property, " is the wrong type, expect ").concat(type);
        }

        if (message === 'must be an enum value') {
          var enumvalue = jsonpointer.get(schema, schemaPath.concat('enum')).join();
          return "".concat(property, " must be one of ").concat(enumvalue);
        }

        return message;
      });
    }

    return errors;
  }

  function _readOnlyError(name) {
    throw new TypeError("\"" + name + "\" is read-only");
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var runtime = {exports: {}};

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  (function (module) {
  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
      return this;
    });

    define(Gp, "toString", function() {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  }(runtime));

  var regenerator = runtime.exports;

  function setConfig$2() {// 无需实现
  }
  function ajax$2(_x) {
    return _ajax.apply(this, arguments);
  }

  function _ajax() {
    _ajax = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(options) {
      return regenerator.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return new Promise(function (resolve, reject) {
                var validationError = validate(ajaxSchema, options);

                if (validationError) {
                  throw report('-1', validationError);
                }

                var url = options.url,
                    _options$method = options.method,
                    method = _options$method === void 0 ? 'post' : _options$method,
                    _options$data = options.data,
                    data = _options$data === void 0 ? {} : _options$data,
                    _options$timeout = options.timeout,
                    timeout = _options$timeout === void 0 ? 5000 : _options$timeout,
                    _options$headers = options.headers,
                    headers = _options$headers === void 0 ? {} : _options$headers;
                var requestConfig = {
                  url: url,
                  method: method,
                  data: data,
                  timeout: timeout,
                  headers: headers // request headers

                };

                try {
                  usdk.sendAsync(requestConfig, function (result) {
                    if (result) {
                      var _JSON$parse = JSON.parse(result),
                          _data = _JSON$parse.data,
                          info = _JSON$parse.info;

                      if (info) {
                        var error_code = info.error_code,
                            error_message = info.error_message;

                        if (error_code == 0) {
                          if (_data) {
                            JSON.parse(_data), _readOnlyError("data"); // 这里需要再做一次转换

                            // 这里需要再做一次转换
                            var _result4 = {};

                            if (options.forceWrappedInData) {
                              _result4.data = _data;
                            } else {
                              _result4 = _data;
                            }

                            if (isPlainObject(_result4)) {
                              // request config
                              if (options.includeRequestConfig) {
                                _result4.config = requestConfig;
                              }
                            }

                            resolve(_result4);
                          } else {
                            reject(report('-1', runningError('INVALID_KEY', {
                              key: 'data'
                            })));
                          }
                        } else {
                          reject(report(error_code, error_message));
                        }
                      } else {
                        reject(report('-1', runningError('INVALID_KEY', {
                          key: 'info'
                        })));
                      }
                    } else {
                      reject(report('-1', runningError('INVALID_SDK_CALL', {
                        method: 'sendAsync'
                      })));
                    }
                  });
                } catch (error) {
                  reject(report('-1', runningError('INVALID_SDK_CALL', {
                    method: 'sendAsync'
                  })));
                }
              });

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _ajax.apply(this, arguments);
  }

  var storage$2 = {
    setData: function setData(options) {
      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return new Promise(function (resolve, reject) {
                  var validationError = validate(storageSchema, options);

                  if (validationError) {
                    throw report('-1', validationError);
                  }

                  var key = options.key,
                      value = options.value,
                      scope = options.scope;

                  try {
                    usdk.writeData({
                      key: key,
                      value: value,
                      scope: scope
                    }, function (result) {
                      if (result) {
                        result = JSON.parse(result);
                        var _result = result,
                            data = _result.data,
                            info = _result.info;

                        if (info) {
                          var error_code = info.error_code,
                              error_message = info.error_message;

                          if (error_code == 0) {
                            resolve();
                          } else {
                            reject(report(error_code, error_message));
                          }
                        } else {
                          reject(report('-1', runningError('INVALID_KEY', {
                            key: 'info'
                          })));
                        }
                      } else {
                        reject(report('-1', runningError('INVALID_SDK_CALL', {
                          method: 'writeData'
                        })));
                      }
                    });
                  } catch (error) {
                    reject(report('-1', runningError('INVALID_SDK_CALL', {
                      method: 'writeData'
                    })));
                  }
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    getData: function getData(options) {
      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return new Promise(function (resolve, reject) {
                  var validationError = validate(storageSchema, options);

                  if (validationError) {
                    throw report('-1', validationError);
                  }

                  var key = options.key,
                      scope = options.scope;

                  try {
                    usdk.readData({
                      key: key,
                      scope: scope
                    }, function (result) {
                      if (result) {
                        result = JSON.parse(result);
                        var _result2 = result,
                            data = _result2.data,
                            info = _result2.info;

                        if (info) {
                          var error_code = info.error_code,
                              error_message = info.error_message;

                          if (error_code == 0) {
                            if (data) {
                              try {
                                data = JSON.parse(data);
                              } catch (error) {// may not be a json string
                              }

                              resolve(data);
                            } else {
                              reject(report('-1', runningError('INVALID_KEY', {
                                key: 'data'
                              })));
                            }
                          } else {
                            reject(report(error_code, error_message));
                          }
                        } else {
                          reject(report('-1', runningError('INVALID_KEY', {
                            key: 'info'
                          })));
                        }
                      } else {
                        reject(report('-1', runningError('INVALID_SDK_CALL', {
                          method: 'readData'
                        })));
                      }
                    });
                  } catch (error) {
                    reject(report('-1', runningError('INVALID_SDK_CALL', {
                      method: 'readData'
                    })));
                  }
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    deleteData: function deleteData(options) {
      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new Promise(function (resolve, reject) {
                  var validationError = validate(storageSchema, options);

                  if (validationError) {
                    throw report('-1', validationError);
                  }

                  var key = options.key,
                      scope = options.scope;

                  try {
                    usdk.deleteData({
                      key: key,
                      scope: scope
                    }, function (result) {
                      if (result) {
                        result = JSON.parse(result);
                        var _result3 = result,
                            data = _result3.data,
                            info = _result3.info;

                        if (info) {
                          var error_code = info.error_code,
                              error_message = info.error_message;

                          if (error_code == 0) {
                            resolve();
                          } else {
                            reject(report(error_code, error_message));
                          }
                        } else {
                          reject(report('-1', runningError('INVALID_KEY', {
                            key: 'info'
                          })));
                        }
                      } else {
                        reject(report('-1', runningError('INVALID_SDK_CALL', {
                          method: 'deleteData'
                        })));
                      }
                    });
                  } catch (error) {
                    reject(report('-1', runningError('INVALID_SDK_CALL', {
                      method: 'deleteData'
                    })));
                  }
                });

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  };

  var ucfSdk = /*#__PURE__*/Object.freeze({
    __proto__: null,
    setConfig: setConfig$2,
    ajax: ajax$2,
    storage: storage$2
  });

  var axios$2 = {exports: {}};

  var bind$2 = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      return fn.apply(thisArg, args);
    };
  };

  var bind$1 = bind$2;

  /*global toString:true*/

  // utils is a library of generic helper functions non-specific to axios

  var toString = Object.prototype.toString;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Array, otherwise false
   */
  function isArray(val) {
    return toString.call(val) === '[object Array]';
  }

  /**
   * Determine if a value is undefined
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  /**
   * Determine if a value is a Buffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
  }

  /**
   * Determine if a value is a FormData
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  function isFormData(val) {
    return (typeof FormData !== 'undefined') && (val instanceof FormData);
  }

  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    var result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a String, otherwise false
   */
  function isString(val) {
    return typeof val === 'string';
  }

  /**
   * Determine if a value is a Number
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Number, otherwise false
   */
  function isNumber(val) {
    return typeof val === 'number';
  }

  /**
   * Determine if a value is an Object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Object, otherwise false
   */
  function isObject(val) {
    return val !== null && typeof val === 'object';
  }

  /**
   * Determine if a value is a Date
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Date, otherwise false
   */
  function isDate(val) {
    return toString.call(val) === '[object Date]';
  }

  /**
   * Determine if a value is a File
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a File, otherwise false
   */
  function isFile(val) {
    return toString.call(val) === '[object File]';
  }

  /**
   * Determine if a value is a Blob
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  function isBlob(val) {
    return toString.call(val) === '[object Blob]';
  }

  /**
   * Determine if a value is a Function
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  function isFunction(val) {
    return toString.call(val) === '[object Function]';
  }

  /**
   * Determine if a value is a Stream
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
  }

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   * @returns {String} The String freed of excess whitespace
   */
  function trim(str) {
    return str.replace(/^\s*/, '').replace(/\s*$/, '');
  }

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   */
  function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                             navigator.product === 'NativeScript' ||
                                             navigator.product === 'NS')) {
      return false;
    }
    return (
      typeof window !== 'undefined' &&
      typeof document !== 'undefined'
    );
  }

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   */
  function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray(obj)) {
      // Iterate over array values
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   * @returns {Object} Result of all merge properties
   */
  function merge(/* obj1, obj2, obj3, ... */) {
    var result = {};
    function assignValue(val, key) {
      if (typeof result[key] === 'object' && typeof val === 'object') {
        result[key] = merge(result[key], val);
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Function equal to merge with the difference being that no reference
   * to original objects is kept.
   *
   * @see merge
   * @param {Object} obj1 Object to merge
   * @returns {Object} Result of all merge properties
   */
  function deepMerge(/* obj1, obj2, obj3, ... */) {
    var result = {};
    function assignValue(val, key) {
      if (typeof result[key] === 'object' && typeof val === 'object') {
        result[key] = deepMerge(result[key], val);
      } else if (typeof val === 'object') {
        result[key] = deepMerge({}, val);
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   * @return {Object} The resulting value of object a
   */
  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind$1(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }

  var utils$d = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    deepMerge: deepMerge,
    extend: extend,
    trim: trim
  };

  var utils$c = utils$d;

  function encode(val) {
    return encodeURIComponent(val).
      replace(/%40/gi, '@').
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+').
      replace(/%5B/gi, '[').
      replace(/%5D/gi, ']');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @returns {string} The formatted url
   */
  var buildURL$2 = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }

    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils$c.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];

      utils$c.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils$c.isArray(val)) {
          key = key + '[]';
        } else {
          val = [val];
        }

        utils$c.forEach(val, function parseValue(v) {
          if (utils$c.isDate(v)) {
            v = v.toISOString();
          } else if (utils$c.isObject(v)) {
            v = JSON.stringify(v);
          }
          parts.push(encode(key) + '=' + encode(v));
        });
      });

      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      var hashmarkIndex = url.indexOf('#');
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }

      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };

  var utils$b = utils$d;

  function InterceptorManager$1() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  InterceptorManager$1.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected
    });
    return this.handlers.length - 1;
  };

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   */
  InterceptorManager$1.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   */
  InterceptorManager$1.prototype.forEach = function forEach(fn) {
    utils$b.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  var InterceptorManager_1 = InterceptorManager$1;

  var utils$a = utils$d;

  /**
   * Transform the data for a request or a response
   *
   * @param {Object|String} data The data to be transformed
   * @param {Array} headers The headers for the request or response
   * @param {Array|Function} fns A single function or Array of functions
   * @returns {*} The resulting transformed data
   */
  var transformData$1 = function transformData(data, headers, fns) {
    /*eslint no-param-reassign:0*/
    utils$a.forEach(fns, function transform(fn) {
      data = fn(data, headers);
    });

    return data;
  };

  var isCancel$1 = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };

  var utils$9 = utils$d;

  var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
    utils$9.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };

  /**
   * Update an Error with the specified config, error code, and response.
   *
   * @param {Error} error The error to update.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The error.
   */
  var enhanceError$1 = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    error.isAxiosError = true;

    error.toJSON = function() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code
      };
    };
    return error;
  };

  var enhanceError = enhanceError$1;

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The created error.
   */
  var createError$2 = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
  };

  var createError$1 = createError$2;

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   */
  var settle$1 = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError$1(
        'Request failed with status code ' + response.status,
        response.config,
        null,
        response.request,
        response
      ));
    }
  };

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  var isAbsoluteURL$1 = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
  };

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   * @returns {string} The combined URL
   */
  var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  };

  var isAbsoluteURL = isAbsoluteURL$1;
  var combineURLs = combineURLs$1;

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   * @returns {string} The combined full path
   */
  var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  };

  var utils$8 = utils$d;

  // Headers whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  var ignoreDuplicateOf = [
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ];

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} headers Headers needing to be parsed
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders$1 = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) { return parsed; }

    utils$8.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils$8.trim(line.substr(0, i)).toLowerCase();
      val = utils$8.trim(line.substr(i + 1));

      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === 'set-cookie') {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      }
    });

    return parsed;
  };

  var utils$7 = utils$d;

  var isURLSameOrigin$1 = (
    utils$7.isStandardBrowserEnv() ?

    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement('a');
        var originURL;

        /**
      * Parse a URL to discover it's components
      *
      * @param {String} url The URL to be parsed
      * @returns {Object}
      */
        function resolveURL(url) {
          var href = url;

          if (msie) {
          // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
          };
        }

        originURL = resolveURL(window.location.href);

        /**
      * Determine if a URL shares the same origin as the current location
      *
      * @param {String} requestURL The URL to test
      * @returns {boolean} True if URL shares the same origin, otherwise false
      */
        return function isURLSameOrigin(requestURL) {
          var parsed = (utils$7.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
          return (parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host);
        };
      })() :

    // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })()
  );

  var utils$6 = utils$d;

  var cookies = (
    utils$6.isStandardBrowserEnv() ?

    // Standard browser envs support document.cookie
      (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));

            if (utils$6.isNumber(expires)) {
              cookie.push('expires=' + new Date(expires).toGMTString());
            }

            if (utils$6.isString(path)) {
              cookie.push('path=' + path);
            }

            if (utils$6.isString(domain)) {
              cookie.push('domain=' + domain);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },

          read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return (match ? decodeURIComponent(match[3]) : null);
          },

          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          }
        };
      })() :

    // Non standard browser env (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() { return null; },
          remove: function remove() {}
        };
      })()
  );

  var utils$5 = utils$d;
  var settle = settle$1;
  var buildURL$1 = buildURL$2;
  var buildFullPath = buildFullPath$1;
  var parseHeaders = parseHeaders$1;
  var isURLSameOrigin = isURLSameOrigin$1;
  var createError = createError$2;

  var xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;

      if (utils$5.isFormData(requestData)) {
        delete requestHeaders['Content-Type']; // Let the browser set it
      }

      var request = new XMLHttpRequest();

      // HTTP basic authentication
      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password || '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);

      // Set the request timeout in MS
      request.timeout = config.timeout;

      // Listen for ready state
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }

        // Prepare the response
        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config,
          request: request
        };

        settle(resolve, reject, response);

        // Clean up request
        request = null;
      };

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(createError('Request aborted', config, 'ECONNABORTED', request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(createError('Network Error', config, null, request));

        // Clean up request
        request = null;
      };

      // Handle timeout
      request.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
          request));

        // Clean up request
        request = null;
      };

      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.
      if (utils$5.isStandardBrowserEnv()) {
        var cookies$1 = cookies;

        // Add xsrf header
        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
          cookies$1.read(config.xsrfCookieName) :
          undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils$5.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            // Remove Content-Type if data is undefined
            delete requestHeaders[key];
          } else {
            // Otherwise add header to the request
            request.setRequestHeader(key, val);
          }
        });
      }

      // Add withCredentials to request if needed
      if (!utils$5.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }

      // Add responseType to request if needed
      if (config.responseType) {
        try {
          request.responseType = config.responseType;
        } catch (e) {
          // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
          // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
          if (config.responseType !== 'json') {
            throw e;
          }
        }
      }

      // Handle progress if needed
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      }

      // Not all browsers support upload events
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken) {
        // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
          if (!request) {
            return;
          }

          request.abort();
          reject(cancel);
          // Clean up request
          request = null;
        });
      }

      if (requestData === undefined) {
        requestData = null;
      }

      // Send the request
      request.send(requestData);
    });
  };

  var utils$4 = utils$d;
  var normalizeHeaderName = normalizeHeaderName$1;

  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils$4.isUndefined(headers) && utils$4.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') {
      // For browsers use XHR adapter
      adapter = xhr;
    } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      // For node use HTTP adapter
      adapter = xhr;
    }
    return adapter;
  }

  var defaults$2 = {
    adapter: getDefaultAdapter(),

    transformRequest: [function transformRequest(data, headers) {
      normalizeHeaderName(headers, 'Accept');
      normalizeHeaderName(headers, 'Content-Type');
      if (utils$4.isFormData(data) ||
        utils$4.isArrayBuffer(data) ||
        utils$4.isBuffer(data) ||
        utils$4.isStream(data) ||
        utils$4.isFile(data) ||
        utils$4.isBlob(data)
      ) {
        return data;
      }
      if (utils$4.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils$4.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
        return data.toString();
      }
      if (utils$4.isObject(data)) {
        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
        return JSON.stringify(data);
      }
      return data;
    }],

    transformResponse: [function transformResponse(data) {
      /*eslint no-param-reassign:0*/
      if (typeof data === 'string') {
        try {
          data = JSON.parse(data);
        } catch (e) { /* Ignore */ }
      }
      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    }
  };

  defaults$2.headers = {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  };

  utils$4.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults$2.headers[method] = {};
  });

  utils$4.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults$2.headers[method] = utils$4.merge(DEFAULT_CONTENT_TYPE);
  });

  var defaults_1 = defaults$2;

  var utils$3 = utils$d;
  var transformData = transformData$1;
  var isCancel = isCancel$1;
  var defaults$1 = defaults_1;

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   * @returns {Promise} The Promise to be fulfilled
   */
  var dispatchRequest$1 = function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    // Ensure headers exist
    config.headers = config.headers || {};

    // Transform request data
    config.data = transformData(
      config.data,
      config.headers,
      config.transformRequest
    );

    // Flatten headers
    config.headers = utils$3.merge(
      config.headers.common || {},
      config.headers[config.method] || {},
      config.headers
    );

    utils$3.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      function cleanHeaderConfig(method) {
        delete config.headers[method];
      }
    );

    var adapter = config.adapter || defaults$1.adapter;

    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);

      // Transform response data
      response.data = transformData(
        response.data,
        response.headers,
        config.transformResponse
      );

      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);

        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData(
            reason.response.data,
            reason.response.headers,
            config.transformResponse
          );
        }
      }

      return Promise.reject(reason);
    });
  };

  var utils$2 = utils$d;

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   * @returns {Object} New object resulting from merging config2 to config1
   */
  var mergeConfig$2 = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};

    var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
    var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
    var defaultToConfig2Keys = [
      'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
      'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
      'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
      'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
      'httpsAgent', 'cancelToken', 'socketPath'
    ];

    utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
      if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      }
    });

    utils$2.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
      if (utils$2.isObject(config2[prop])) {
        config[prop] = utils$2.deepMerge(config1[prop], config2[prop]);
      } else if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      } else if (utils$2.isObject(config1[prop])) {
        config[prop] = utils$2.deepMerge(config1[prop]);
      } else if (typeof config1[prop] !== 'undefined') {
        config[prop] = config1[prop];
      }
    });

    utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
      if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      } else if (typeof config1[prop] !== 'undefined') {
        config[prop] = config1[prop];
      }
    });

    var axiosKeys = valueFromConfig2Keys
      .concat(mergeDeepPropertiesKeys)
      .concat(defaultToConfig2Keys);

    var otherKeys = Object
      .keys(config2)
      .filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });

    utils$2.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
      if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      } else if (typeof config1[prop] !== 'undefined') {
        config[prop] = config1[prop];
      }
    });

    return config;
  };

  var utils$1 = utils$d;
  var buildURL = buildURL$2;
  var InterceptorManager = InterceptorManager_1;
  var dispatchRequest = dispatchRequest$1;
  var mergeConfig$1 = mergeConfig$2;

  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   */
  function Axios$1(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {Object} config The config specific for this request (merged with this.defaults)
   */
  Axios$1.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === 'string') {
      config = arguments[1] || {};
      config.url = arguments[0];
    } else {
      config = config || {};
    }

    config = mergeConfig$1(this.defaults, config);

    // Set config.method
    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = 'get';
    }

    // Hook up interceptors middleware
    var chain = [dispatchRequest, undefined];
    var promise = Promise.resolve(config);

    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      chain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      chain.push(interceptor.fulfilled, interceptor.rejected);
    });

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  };

  Axios$1.prototype.getUri = function getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  };

  // Provide aliases for supported request methods
  utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function(url, config) {
      return this.request(utils$1.merge(config || {}, {
        method: method,
        url: url
      }));
    };
  });

  utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function(url, data, config) {
      return this.request(utils$1.merge(config || {}, {
        method: method,
        url: url,
        data: data
      }));
    };
  });

  var Axios_1 = Axios$1;

  /**
   * A `Cancel` is an object that is thrown when an operation is canceled.
   *
   * @class
   * @param {string=} message The message.
   */
  function Cancel$1(message) {
    this.message = message;
  }

  Cancel$1.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel$1.prototype.__CANCEL__ = true;

  var Cancel_1 = Cancel$1;

  var Cancel = Cancel_1;

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @class
   * @param {Function} executor The executor function.
   */
  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    var token = this;
    executor(function cancel(message) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new Cancel(message);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel
    };
  };

  var CancelToken_1 = CancelToken;

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   * @returns {Function}
   */
  var spread = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };

  var utils = utils$d;
  var bind = bind$2;
  var Axios = Axios_1;
  var mergeConfig = mergeConfig$2;
  var defaults = defaults_1;

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   * @return {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);

    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);

    // Copy context to instance
    utils.extend(instance, context);

    return instance;
  }

  // Create the default instance to be exported
  var axios$1 = createInstance(defaults);

  // Expose Axios class to allow class inheritance
  axios$1.Axios = Axios;

  // Factory for creating new instances
  axios$1.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
  };

  // Expose Cancel & CancelToken
  axios$1.Cancel = Cancel_1;
  axios$1.CancelToken = CancelToken_1;
  axios$1.isCancel = isCancel$1;

  // Expose all/spread
  axios$1.all = function all(promises) {
    return Promise.all(promises);
  };
  axios$1.spread = spread;

  axios$2.exports = axios$1;

  // Allow use of default import syntax in TypeScript
  axios$2.exports.default = axios$1;

  var axios = axios$2.exports;

  var logger;
  function setConfig$1(opts) {
    logger = opts.logger;
  }
  function ajax$1(options) {
    return new Promise(function (resolve, reject) {
      var validationError = validate(ajaxSchema, options);

      if (validationError) {
        throw report('-1', validationError);
      }

      var url = options.url,
          _options$method = options.method,
          method = _options$method === void 0 ? 'post' : _options$method,
          _options$data = options.data,
          data = _options$data === void 0 ? {} : _options$data,
          _options$timeout = options.timeout,
          timeout = _options$timeout === void 0 ? 5000 : _options$timeout,
          _options$headers = options.headers,
          headers = _options$headers === void 0 ? {} : _options$headers,
          _options$withCredenti = options.withCredentials,
          withCredentials = _options$withCredenti === void 0 ? false : _options$withCredenti,
          _options$responseType = options.responseType,
          responseType = _options$responseType === void 0 ? 'json' : _options$responseType;
      var requestConfig = {
        url: url,
        method: method,
        params: method === 'get' ? data : {},
        data: method === 'post' ? data : {},
        timeout: timeout,
        headers: headers,
        // request headers
        withCredentials: withCredentials,
        responseType: responseType
      };
      logger && logger.debug("\u53D1\u9001\u8BF7\u6C42 ".concat(requestConfig.url, " \u914D\u7F6E\u9879"), requestConfig);
      axios(requestConfig).then(function (response) {
        var data = response.data,
            headers = response.headers,
            status = response.status,
            statusText = response.statusText;
        logger && logger.debug("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5E94\u7B54\u5934\u90E8\u5B57\u6BB5"), headers);
        logger && logger.debug("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5E94\u7B54\u4F53"), data);
        var result = {};

        if (options.forceWrappedInData) {
          result.data = data;
        } else {
          result = data;
        }

        if (isPlainObject$1(result)) {
          // request config
          if (options.includeRequestConfig) {
            result.config = requestConfig;
          } // response headers


          if (options.includeResponseHeaders) {
            result.headers = headers;
          }

          if (options.includeResponseStatusInfo) {
            result.status = status;
            result.statusText = statusText;
          }
        }

        resolve(result);
      }).catch(function (error) {
        logger && logger.error("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5F02\u5E38"));

        if (error.response) {
          // The request was made and the server responded with a status code
          // that falls out of the range of 2xx
          var _error$response = error.response,
              status = _error$response.status,
              statusText = _error$response.statusText,
              _data = _error$response.data,
              _headers = _error$response.headers;
          logger && logger.error("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5E94\u7B54\u5934\u90E8\u5B57\u6BB5"), _headers);
          logger && logger.error("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5E94\u7B54\u4F53"), _data);
          var result = {};

          if (options.forceWrappedInData) {
            result.data = _data;
          } else {
            result = _data;
          }

          if (isPlainObject$1(result)) {
            // request config
            if (options.includeRequestConfig) {
              result.config = requestConfig;
            } // response headers


            if (options.includeResponseHeaders) {
              result.headers = _headers;
            }

            if (options.includeResponseStatusInfo) {
              result.status = status;
              result.statusText = statusText;
            }
          }

          return reject(report(status, statusText, result));
        } else if (error.request) {
          // The request was made but no response was received
          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
          // http.ClientRequest in node.js
          logger && logger.error(runningError('INVALID_REQUEST'));
          reject(report('-1', runningError('INVALID_REQUEST')));
        } else {
          // Something happened in setting up the request that triggered an Error
          logger && logger.error(error.message);
          reject(report('-1', error.message));
        }
      });
    });
  }
  var storage$1 = {
    setData: function setData(options) {
      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        var validationError, key, value;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                validationError = validate(storageSchema, options);

                if (!validationError) {
                  _context.next = 4;
                  break;
                }

                logger && logger.error('本地数据写入异常', validationError);
                throw report('-1', validationError);

              case 4:
                key = options.key, value = options.value;

                if (isObject$1(value)) {
                  value = JSON.stringify(value);
                }

                value = value.toString();
                _context.prev = 7;
                logger && logger.debug('本地数据写入成功', key, value);
                return _context.abrupt("return", localStorage.setItem(key, value));

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](7);
                logger && logger.error('本地数据写入异常', 'fail to set local data, value could exceed the quota');
                throw report('-1', 'fail to set local data, value could exceed the quota');

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[7, 12]]);
      }))();
    },
    getData: function getData(options) {
      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        var validationError, key, value;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                validationError = validate(storageSchema, options);

                if (!validationError) {
                  _context2.next = 4;
                  break;
                }

                logger && logger.error('本地数据读取异常', validationError);
                throw report('-1', validationError);

              case 4:
                key = options.key;

                if (!localStorage.hasOwnProperty(key)) {
                  _context2.next = 11;
                  break;
                }

                value = localStorage.getItem(key);
                logger && logger.debug('读取本地数据成功', key, value);
                return _context2.abrupt("return", value);

              case 11:
                logger && logger.error('本地数据读取异常', runningError('NOT_FOUND', {
                  key: key
                }));
                throw report('-1', runningError('NOT_FOUND', {
                  key: key
                }));

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    deleteData: function deleteData(options) {
      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        var validationError, key;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                validationError = validate(storageSchema, options);

                if (!validationError) {
                  _context3.next = 4;
                  break;
                }

                logger && logger.error('本地数据删除异常', validationError);
                throw report('-1', validationError);

              case 4:
                key = options.key;

                if (!localStorage.hasOwnProperty(key)) {
                  _context3.next = 10;
                  break;
                }

                logger && logger.debug('删除本地数据成功', key);
                return _context3.abrupt("return", localStorage.removeItem(key));

              case 10:
                logger && logger.error('本地数据删除异常', runningError('NOT_FOUND', {
                  key: key
                }));
                throw report('-1', runningError('NOT_FOUND', {
                  key: key
                }));

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  };

  var webSdk = /*#__PURE__*/Object.freeze({
    __proto__: null,
    setConfig: setConfig$1,
    ajax: ajax$1,
    storage: storage$1
  });

  var city_code = [110000, 110100, 110101, 110102, 110105, 110106, 110107, 110108, 110109, 110111, 110112, 110113, 110114, 110115, 110116, 110117, 110200, 110228, 110229, 120000, 120100, 120101, 120102, 120103, 120104, 120105, 120106, 120110, 120111, 120112, 120113, 120114, 120115, 120116, 120117, 120118, 120200, 120225, 130000, 130100, 130101, 130102, 130104, 130105, 130107, 130108, 130109, 130110, 130111, 130121, 130123, 130125, 130126, 130127, 130128, 130129, 130130, 130131, 130132, 130133, 130183, 130184, 130200, 130201, 130202, 130203, 130204, 130205, 130207, 130208, 130209, 130223, 130224, 130225, 130227, 130229, 130281, 130283, 130300, 130301, 130302, 130303, 130304, 130306, 130321, 130322, 130324, 130400, 130401, 130402, 130403, 130404, 130406, 130421, 130423, 130424, 130425, 130426, 130427, 130428, 130429, 130430, 130431, 130432, 130433, 130434, 130435, 130481, 130500, 130501, 130502, 130503, 130521, 130522, 130523, 130524, 130525, 130526, 130527, 130528, 130529, 130530, 130531, 130532, 130533, 130534, 130535, 130581, 130582, 130600, 130601, 130602, 130606, 130607, 130608, 130609, 130623, 130624, 130626, 130627, 130628, 130629, 130630, 130631, 130632, 130633, 130634, 130635, 130636, 130637, 130638, 130681, 130683, 130684, 130700, 130701, 130702, 130703, 130705, 130706, 130721, 130722, 130723, 130724, 130725, 130726, 130727, 130728, 130729, 130730, 130731, 130732, 130733, 130800, 130801, 130802, 130803, 130804, 130821, 130822, 130823, 130824, 130825, 130826, 130827, 130828, 130900, 130901, 130902, 130903, 130921, 130922, 130923, 130924, 130925, 130926, 130927, 130928, 130929, 130930, 130981, 130982, 130983, 130984, 131000, 131001, 131002, 131003, 131022, 131023, 131024, 131025, 131026, 131028, 131081, 131082, 131100, 131101, 131102, 131121, 131122, 131123, 131124, 131125, 131126, 131127, 131128, 131181, 131182, 139000, 139001, 139002, 140000, 140100, 140101, 140105, 140106, 140107, 140108, 140109, 140110, 140121, 140122, 140123, 140181, 140200, 140201, 140202, 140203, 140211, 140212, 140221, 140222, 140223, 140224, 140225, 140226, 140227, 140300, 140301, 140302, 140303, 140311, 140321, 140322, 140400, 140401, 140402, 140411, 140421, 140423, 140424, 140425, 140426, 140427, 140428, 140429, 140430, 140431, 140481, 140500, 140501, 140502, 140521, 140522, 140524, 140525, 140581, 140600, 140601, 140602, 140603, 140621, 140622, 140623, 140624, 140700, 140701, 140702, 140721, 140722, 140723, 140724, 140725, 140726, 140727, 140728, 140729, 140781, 140800, 140801, 140802, 140821, 140822, 140823, 140824, 140825, 140826, 140827, 140828, 140829, 140830, 140881, 140882, 140900, 140901, 140902, 140921, 140922, 140923, 140924, 140925, 140926, 140927, 140928, 140929, 140930, 140931, 140932, 140981, 141000, 141001, 141002, 141021, 141022, 141023, 141024, 141025, 141026, 141027, 141028, 141029, 141030, 141031, 141032, 141033, 141034, 141081, 141082, 141100, 141101, 141102, 141121, 141122, 141123, 141124, 141125, 141126, 141127, 141128, 141129, 141130, 141181, 141182, 150000, 150100, 150101, 150102, 150103, 150104, 150105, 150121, 150122, 150123, 150124, 150125, 150200, 150201, 150202, 150203, 150204, 150205, 150206, 150207, 150221, 150222, 150223, 150300, 150301, 150302, 150303, 150304, 150400, 150401, 150402, 150403, 150404, 150421, 150422, 150423, 150424, 150425, 150426, 150428, 150429, 150430, 150500, 150501, 150502, 150521, 150522, 150523, 150524, 150525, 150526, 150581, 150600, 150601, 150602, 150621, 150622, 150623, 150624, 150625, 150626, 150627, 150700, 150701, 150702, 150703, 150721, 150722, 150723, 150724, 150725, 150726, 150727, 150781, 150782, 150783, 150784, 150785, 150800, 150801, 150802, 150821, 150822, 150823, 150824, 150825, 150826, 150900, 150901, 150902, 150921, 150922, 150923, 150924, 150925, 150926, 150927, 150928, 150929, 150981, 152200, 152201, 152202, 152221, 152222, 152223, 152224, 152500, 152501, 152502, 152522, 152523, 152524, 152525, 152526, 152527, 152528, 152529, 152530, 152531, 152900, 152921, 152922, 152923, 210000, 210100, 210101, 210102, 210103, 210104, 210105, 210106, 210111, 210112, 210113, 210114, 210122, 210123, 210124, 210181, 210200, 210201, 210202, 210203, 210204, 210211, 210212, 210213, 210224, 210281, 210282, 210283, 210300, 210301, 210302, 210303, 210304, 210311, 210321, 210323, 210381, 210400, 210401, 210402, 210403, 210404, 210411, 210421, 210422, 210423, 210500, 210501, 210502, 210503, 210504, 210505, 210521, 210522, 210600, 210601, 210602, 210603, 210604, 210624, 210681, 210682, 210700, 210701, 210702, 210703, 210711, 210726, 210727, 210781, 210782, 210800, 210801, 210802, 210803, 210804, 210811, 210881, 210882, 210900, 210901, 210902, 210903, 210904, 210905, 210911, 210921, 210922, 211000, 211001, 211002, 211003, 211004, 211005, 211011, 211021, 211081, 211100, 211101, 211102, 211103, 211121, 211122, 211200, 211201, 211202, 211204, 211221, 211223, 211224, 211281, 211282, 211300, 211301, 211302, 211303, 211321, 211322, 211324, 211381, 211382, 211400, 211401, 211402, 211403, 211404, 211421, 211422, 211481, 220000, 220100, 220101, 220102, 220103, 220104, 220105, 220106, 220112, 220113, 220122, 220182, 220183, 220200, 220201, 220202, 220203, 220204, 220211, 220221, 220281, 220282, 220283, 220284, 220300, 220301, 220302, 220303, 220322, 220323, 220381, 220382, 220400, 220401, 220402, 220403, 220421, 220422, 220500, 220501, 220502, 220503, 220521, 220523, 220524, 220581, 220582, 220600, 220601, 220602, 220605, 220621, 220622, 220623, 220681, 220700, 220701, 220702, 220721, 220722, 220723, 220781, 220800, 220801, 220802, 220821, 220822, 220881, 220882, 222400, 222401, 222402, 222403, 222404, 222405, 222406, 222424, 222426, 230000, 230100, 230101, 230102, 230103, 230104, 230108, 230109, 230110, 230111, 230112, 230113, 230123, 230124, 230125, 230126, 230127, 230128, 230129, 230183, 230184, 230200, 230201, 230202, 230203, 230204, 230205, 230206, 230207, 230208, 230221, 230223, 230224, 230225, 230227, 230229, 230230, 230231, 230281, 230300, 230301, 230302, 230303, 230304, 230305, 230306, 230307, 230321, 230381, 230382, 230400, 230401, 230402, 230403, 230404, 230405, 230406, 230407, 230421, 230422, 230500, 230501, 230502, 230503, 230505, 230506, 230521, 230522, 230523, 230524, 230600, 230601, 230602, 230603, 230604, 230605, 230606, 230621, 230622, 230623, 230624, 230700, 230701, 230702, 230703, 230704, 230705, 230706, 230707, 230708, 230709, 230710, 230711, 230712, 230713, 230714, 230715, 230716, 230722, 230781, 230800, 230801, 230803, 230804, 230805, 230811, 230822, 230826, 230828, 230833, 230881, 230882, 230900, 230901, 230902, 230903, 230904, 230921, 231000, 231001, 231002, 231003, 231004, 231005, 231024, 231025, 231081, 231083, 231084, 231085, 231100, 231101, 231102, 231121, 231123, 231124, 231181, 231182, 231200, 231201, 231202, 231221, 231222, 231223, 231224, 231225, 231226, 231281, 231282, 231283, 232700, 232721, 232722, 232723, 310000, 310100, 310101, 310104, 310105, 310106, 310107, 310108, 310109, 310110, 310112, 310113, 310114, 310115, 310116, 310117, 310118, 310120, 310200, 310230, 320000, 320100, 320101, 320102, 320104, 320105, 320106, 320111, 320113, 320114, 320115, 320116, 320117, 320118, 320200, 320201, 320202, 320203, 320204, 320205, 320206, 320211, 320281, 320282, 320300, 320301, 320302, 320303, 320305, 320311, 320312, 320321, 320322, 320324, 320381, 320382, 320400, 320401, 320402, 320404, 320411, 320412, 320413, 320481, 320500, 320501, 320505, 320506, 320507, 320508, 320509, 320581, 320582, 320583, 320585, 320600, 320601, 320602, 320611, 320612, 320621, 320623, 320681, 320682, 320684, 320700, 320701, 320703, 320706, 320707, 320722, 320723, 320724, 320800, 320801, 320802, 320803, 320804, 320811, 320826, 320829, 320830, 320831, 320900, 320901, 320902, 320903, 320904, 320921, 320922, 320923, 320924, 320925, 320981, 321000, 321001, 321002, 321003, 321012, 321023, 321081, 321084, 321100, 321101, 321102, 321111, 321112, 321181, 321182, 321183, 321200, 321201, 321202, 321203, 321204, 321281, 321282, 321283, 321300, 321301, 321302, 321311, 321322, 321323, 321324, 330000, 330100, 330101, 330102, 330103, 330104, 330105, 330106, 330108, 330109, 330110, 330111, 330122, 330127, 330182, 330185, 330200, 330201, 330203, 330204, 330205, 330206, 330211, 330212, 330225, 330226, 330281, 330282, 330283, 330300, 330301, 330302, 330303, 330304, 330305, 330324, 330326, 330327, 330328, 330329, 330381, 330382, 330400, 330401, 330402, 330411, 330421, 330424, 330481, 330482, 330483, 330500, 330501, 330502, 330503, 330521, 330522, 330523, 330600, 330601, 330602, 330603, 330604, 330624, 330681, 330683, 330700, 330701, 330702, 330703, 330723, 330726, 330727, 330781, 330782, 330783, 330784, 330800, 330801, 330802, 330803, 330822, 330824, 330825, 330881, 330900, 330901, 330902, 330903, 330921, 330922, 331000, 331001, 331002, 331003, 331004, 331021, 331022, 331023, 331024, 331081, 331082, 331100, 331101, 331102, 331121, 331122, 331123, 331124, 331125, 331126, 331127, 331181, 340000, 340100, 340101, 340102, 340103, 340104, 340111, 340121, 340122, 340123, 340124, 340181, 340200, 340201, 340202, 340203, 340207, 340208, 340221, 340222, 340223, 340225, 340300, 340301, 340302, 340303, 340304, 340311, 340321, 340322, 340323, 340400, 340401, 340402, 340403, 340404, 340405, 340406, 340421, 340500, 340501, 340503, 340504, 340506, 340521, 340522, 340523, 340600, 340601, 340602, 340603, 340604, 340621, 340700, 340701, 340702, 340703, 340711, 340721, 340800, 340801, 340802, 340803, 340811, 340822, 340823, 340824, 340825, 340826, 340827, 340828, 340881, 341000, 341001, 341002, 341003, 341004, 341021, 341022, 341023, 341024, 341100, 341101, 341102, 341103, 341122, 341124, 341125, 341126, 341181, 341182, 341200, 341201, 341202, 341203, 341204, 341221, 341222, 341225, 341226, 341282, 341300, 341301, 341302, 341321, 341322, 341323, 341324, 341500, 341501, 341502, 341503, 341521, 341522, 341523, 341524, 341525, 341600, 341601, 341602, 341621, 341622, 341623, 341700, 341701, 341702, 341721, 341722, 341723, 341800, 341801, 341802, 341821, 341822, 341823, 341824, 341825, 341881, 350000, 350100, 350101, 350102, 350103, 350104, 350105, 350111, 350121, 350122, 350123, 350124, 350125, 350128, 350181, 350182, 350200, 350201, 350203, 350205, 350206, 350211, 350212, 350213, 350300, 350301, 350302, 350303, 350304, 350305, 350322, 350400, 350401, 350402, 350403, 350421, 350423, 350424, 350425, 350426, 350427, 350428, 350429, 350430, 350481, 350500, 350501, 350502, 350503, 350504, 350505, 350521, 350524, 350525, 350526, 350527, 350581, 350582, 350583, 350600, 350601, 350602, 350603, 350622, 350623, 350624, 350625, 350626, 350627, 350628, 350629, 350681, 350700, 350701, 350702, 350703, 350721, 350722, 350723, 350724, 350725, 350781, 350782, 350783, 350800, 350801, 350802, 350803, 350821, 350823, 350824, 350825, 350881, 350900, 350901, 350902, 350921, 350922, 350923, 350924, 350925, 350926, 350981, 350982, 360000, 360100, 360101, 360102, 360103, 360104, 360105, 360111, 360112, 360121, 360123, 360124, 360200, 360201, 360202, 360203, 360222, 360281, 360300, 360301, 360302, 360313, 360321, 360322, 360323, 360400, 360401, 360402, 360403, 360421, 360423, 360424, 360425, 360426, 360427, 360428, 360429, 360430, 360481, 360482, 360500, 360501, 360502, 360521, 360600, 360601, 360602, 360622, 360681, 360700, 360701, 360702, 360703, 360721, 360722, 360723, 360724, 360725, 360726, 360727, 360728, 360729, 360730, 360731, 360732, 360733, 360734, 360735, 360781, 360800, 360801, 360802, 360803, 360821, 360822, 360823, 360824, 360825, 360826, 360827, 360828, 360829, 360830, 360881, 360900, 360901, 360902, 360921, 360922, 360923, 360924, 360925, 360926, 360981, 360982, 360983, 361000, 361001, 361002, 361021, 361022, 361023, 361024, 361025, 361026, 361027, 361028, 361029, 361030, 361100, 361101, 361102, 361103, 361121, 361123, 361124, 361125, 361126, 361127, 361128, 361129, 361130, 361181, 370000, 370100, 370101, 370102, 370103, 370104, 370105, 370112, 370113, 370124, 370125, 370126, 370181, 370200, 370201, 370202, 370203, 370211, 370212, 370213, 370214, 370281, 370282, 370283, 370285, 370300, 370301, 370302, 370303, 370304, 370305, 370306, 370321, 370322, 370323, 370400, 370401, 370402, 370403, 370404, 370405, 370406, 370481, 370500, 370501, 370502, 370503, 370521, 370522, 370523, 370600, 370601, 370602, 370611, 370612, 370613, 370634, 370681, 370682, 370683, 370684, 370685, 370686, 370687, 370700, 370701, 370702, 370703, 370704, 370705, 370724, 370725, 370781, 370782, 370783, 370784, 370785, 370786, 370800, 370801, 370811, 370812, 370826, 370827, 370828, 370829, 370830, 370831, 370832, 370881, 370883, 370900, 370901, 370902, 370911, 370921, 370923, 370982, 370983, 371000, 371001, 371002, 371003, 371082, 371083, 371100, 371101, 371102, 371103, 371121, 371122, 371200, 371201, 371202, 371203, 371300, 371301, 371302, 371311, 371312, 371321, 371322, 371323, 371324, 371325, 371326, 371327, 371328, 371329, 371400, 371401, 371402, 371403, 371422, 371423, 371424, 371425, 371426, 371427, 371428, 371481, 371482, 371500, 371501, 371502, 371521, 371522, 371523, 371524, 371525, 371526, 371581, 371600, 371601, 371602, 371603, 371621, 371622, 371623, 371625, 371626, 371700, 371701, 371702, 371721, 371722, 371723, 371724, 371725, 371726, 371727, 371728, 410000, 410100, 410101, 410102, 410103, 410104, 410105, 410106, 410108, 410122, 410181, 410182, 410183, 410184, 410185, 410200, 410201, 410202, 410203, 410204, 410205, 410211, 410212, 410221, 410222, 410223, 410225, 410300, 410301, 410302, 410303, 410304, 410305, 410306, 410311, 410322, 410323, 410324, 410325, 410326, 410327, 410328, 410329, 410381, 410400, 410401, 410402, 410403, 410404, 410411, 410421, 410422, 410423, 410425, 410481, 410482, 410500, 410501, 410502, 410503, 410505, 410506, 410522, 410523, 410526, 410527, 410581, 410600, 410601, 410602, 410603, 410611, 410621, 410622, 410700, 410701, 410702, 410703, 410704, 410711, 410721, 410724, 410725, 410726, 410727, 410728, 410781, 410782, 410800, 410801, 410802, 410803, 410804, 410811, 410821, 410822, 410823, 410825, 410882, 410883, 410900, 410901, 410902, 410922, 410923, 410926, 410927, 410928, 411000, 411001, 411002, 411023, 411024, 411025, 411081, 411082, 411100, 411101, 411102, 411103, 411104, 411121, 411122, 411200, 411201, 411202, 411221, 411222, 411224, 411281, 411282, 411300, 411301, 411302, 411303, 411321, 411322, 411323, 411324, 411325, 411326, 411327, 411328, 411329, 411330, 411381, 411400, 411401, 411402, 411403, 411421, 411422, 411423, 411424, 411425, 411426, 411481, 411500, 411501, 411502, 411503, 411521, 411522, 411523, 411524, 411525, 411526, 411527, 411528, 411600, 411601, 411602, 411621, 411622, 411623, 411624, 411625, 411626, 411627, 411628, 411681, 411700, 411701, 411702, 411721, 411722, 411723, 411724, 411725, 411726, 411727, 411728, 411729, 419000, 419001, 420000, 420100, 420101, 420102, 420103, 420104, 420105, 420106, 420107, 420111, 420112, 420113, 420114, 420115, 420116, 420117, 420200, 420201, 420202, 420203, 420204, 420205, 420222, 420281, 420300, 420301, 420302, 420303, 420304, 420322, 420323, 420324, 420325, 420381, 420500, 420501, 420502, 420503, 420504, 420505, 420506, 420525, 420526, 420527, 420528, 420529, 420581, 420582, 420583, 420600, 420601, 420602, 420606, 420607, 420624, 420625, 420626, 420682, 420683, 420684, 420700, 420701, 420702, 420703, 420704, 420800, 420801, 420802, 420804, 420821, 420822, 420881, 420900, 420901, 420902, 420921, 420922, 420923, 420981, 420982, 420984, 421000, 421001, 421002, 421003, 421022, 421023, 421024, 421081, 421083, 421087, 421100, 421101, 421102, 421121, 421122, 421123, 421124, 421125, 421126, 421127, 421181, 421182, 421200, 421201, 421202, 421221, 421222, 421223, 421224, 421281, 421300, 421301, 421303, 421321, 421381, 422800, 422801, 422802, 422822, 422823, 422825, 422826, 422827, 422828, 429000, 429004, 429005, 429006, 429021, 430000, 430100, 430101, 430102, 430103, 430104, 430105, 430111, 430112, 430121, 430124, 430181, 430200, 430201, 430202, 430203, 430204, 430211, 430221, 430223, 430224, 430225, 430281, 430300, 430301, 430302, 430304, 430321, 430381, 430382, 430400, 430401, 430405, 430406, 430407, 430408, 430412, 430421, 430422, 430423, 430424, 430426, 430481, 430482, 430500, 430501, 430502, 430503, 430511, 430521, 430522, 430523, 430524, 430525, 430527, 430528, 430529, 430581, 430600, 430601, 430602, 430603, 430611, 430621, 430623, 430624, 430626, 430681, 430682, 430700, 430701, 430702, 430703, 430721, 430722, 430723, 430724, 430725, 430726, 430781, 430800, 430801, 430802, 430811, 430821, 430822, 430900, 430901, 430902, 430903, 430921, 430922, 430923, 430981, 431000, 431001, 431002, 431003, 431021, 431022, 431023, 431024, 431025, 431026, 431027, 431028, 431081, 431100, 431101, 431102, 431103, 431121, 431122, 431123, 431124, 431125, 431126, 431127, 431128, 431129, 431200, 431201, 431202, 431221, 431222, 431223, 431224, 431225, 431226, 431227, 431228, 431229, 431230, 431281, 431300, 431301, 431302, 431321, 431322, 431381, 431382, 433100, 433101, 433122, 433123, 433124, 433125, 433126, 433127, 433130, 440000, 440100, 440101, 440103, 440104, 440105, 440106, 440111, 440112, 440113, 440114, 440115, 440117, 440118, 440200, 440201, 440203, 440204, 440205, 440222, 440224, 440229, 440232, 440233, 440281, 440282, 440300, 440301, 440303, 440304, 440305, 440306, 440307, 440308, 440400, 440401, 440402, 440403, 440404, 440500, 440501, 440507, 440511, 440512, 440513, 440514, 440515, 440523, 440600, 440601, 440604, 440605, 440606, 440607, 440608, 440700, 440701, 440703, 440704, 440705, 440781, 440783, 440784, 440785, 440800, 440801, 440802, 440803, 440804, 440811, 440823, 440825, 440881, 440882, 440883, 440900, 440901, 440902, 440904, 440981, 440982, 440983, 441200, 441201, 441202, 441203, 441204, 441223, 441224, 441225, 441226, 441284, 441300, 441301, 441302, 441303, 441322, 441323, 441324, 441400, 441401, 441402, 441403, 441422, 441423, 441424, 441426, 441427, 441481, 441500, 441501, 441502, 441521, 441523, 441581, 441600, 441601, 441602, 441621, 441622, 441623, 441624, 441625, 441700, 441701, 441702, 441704, 441721, 441781, 441800, 441801, 441802, 441803, 441821, 441823, 441825, 441826, 441881, 441882, 441900, 442000, 445100, 445101, 445102, 445103, 445122, 445200, 445201, 445202, 445203, 445222, 445224, 445281, 445300, 445301, 445302, 445303, 445321, 445322, 445381, 450000, 450100, 450101, 450102, 450103, 450105, 450107, 450108, 450109, 450110, 450123, 450124, 450125, 450126, 450127, 450200, 450201, 450202, 450203, 450204, 450205, 450221, 450222, 450223, 450224, 450225, 450226, 450300, 450301, 450302, 450303, 450304, 450305, 450311, 450312, 450321, 450323, 450324, 450325, 450326, 450327, 450328, 450329, 450330, 450331, 450332, 450400, 450401, 450403, 450405, 450406, 450421, 450422, 450423, 450481, 450500, 450501, 450502, 450503, 450512, 450521, 450600, 450601, 450602, 450603, 450621, 450681, 450700, 450701, 450702, 450703, 450721, 450722, 450800, 450801, 450802, 450803, 450804, 450821, 450881, 450900, 450901, 450902, 450903, 450921, 450922, 450923, 450924, 450981, 451000, 451001, 451002, 451021, 451022, 451023, 451024, 451026, 451027, 451028, 451029, 451030, 451031, 451081, 451100, 451101, 451102, 451121, 451122, 451123, 451200, 451201, 451202, 451221, 451222, 451223, 451224, 451225, 451226, 451227, 451228, 451229, 451281, 451300, 451301, 451302, 451321, 451322, 451323, 451324, 451381, 451400, 451401, 451402, 451421, 451422, 451423, 451424, 451425, 451481, 460000, 460100, 460101, 460105, 460106, 460107, 460108, 460200, 460201, 460202, 460203, 460204, 460205, 460300, 460321, 460322, 460323, 469000, 469001, 469002, 469003, 469005, 469006, 469007, 469021, 469022, 469023, 469024, 469025, 469026, 469027, 469028, 469029, 469030, 500000, 500100, 500101, 500102, 500103, 500104, 500105, 500106, 500107, 500108, 500109, 500110, 500111, 500112, 500113, 500114, 500115, 500116, 500117, 500118, 500119, 500120, 500151, 500152, 500153, 500200, 500228, 500229, 500230, 500231, 500232, 500233, 500234, 500235, 500236, 500237, 500238, 500240, 500241, 500242, 500243, 510000, 510100, 510101, 510104, 510105, 510106, 510107, 510108, 510112, 510113, 510114, 510115, 510121, 510122, 510124, 510129, 510131, 510132, 510181, 510182, 510183, 510184, 510300, 510301, 510302, 510303, 510304, 510311, 510321, 510322, 510400, 510401, 510402, 510403, 510411, 510421, 510422, 510500, 510501, 510502, 510503, 510504, 510521, 510522, 510524, 510525, 510600, 510601, 510603, 510623, 510626, 510681, 510682, 510683, 510700, 510701, 510703, 510704, 510722, 510723, 510724, 510725, 510726, 510727, 510781, 510800, 510801, 510802, 510811, 510812, 510821, 510822, 510823, 510824, 510900, 510901, 510903, 510904, 510921, 510922, 510923, 511000, 511001, 511002, 511011, 511024, 511025, 511028, 511100, 511101, 511102, 511111, 511112, 511113, 511123, 511124, 511126, 511129, 511132, 511133, 511181, 511300, 511301, 511302, 511303, 511304, 511321, 511322, 511323, 511324, 511325, 511381, 511400, 511401, 511402, 511403, 511421, 511423, 511424, 511425, 511500, 511501, 511502, 511503, 511521, 511523, 511524, 511525, 511526, 511527, 511528, 511529, 511600, 511601, 511602, 511603, 511621, 511622, 511623, 511681, 511700, 511701, 511702, 511703, 511722, 511723, 511724, 511725, 511781, 511800, 511801, 511802, 511803, 511822, 511823, 511824, 511825, 511826, 511827, 511900, 511901, 511902, 511903, 511921, 511922, 511923, 512000, 512001, 512002, 512021, 512022, 512081, 513200, 513221, 513222, 513223, 513224, 513225, 513226, 513227, 513228, 513229, 513230, 513231, 513232, 513233, 513300, 513301, 513322, 513323, 513324, 513325, 513326, 513327, 513328, 513329, 513330, 513331, 513332, 513333, 513334, 513335, 513336, 513337, 513338, 513400, 513401, 513422, 513423, 513424, 513425, 513426, 513427, 513428, 513429, 513430, 513431, 513432, 513433, 513434, 513435, 513436, 513437, 520000, 520100, 520101, 520102, 520103, 520111, 520112, 520113, 520115, 520121, 520122, 520123, 520181, 520200, 520201, 520203, 520221, 520222, 520300, 520301, 520302, 520303, 520321, 520322, 520323, 520324, 520325, 520326, 520327, 520328, 520329, 520330, 520381, 520382, 520400, 520401, 520402, 520403, 520422, 520423, 520424, 520425, 520500, 520501, 520502, 520521, 520522, 520523, 520524, 520525, 520526, 520527, 520600, 520601, 520602, 520603, 520621, 520622, 520623, 520624, 520625, 520626, 520627, 520628, 522300, 522301, 522322, 522323, 522324, 522325, 522326, 522327, 522328, 522600, 522601, 522622, 522623, 522624, 522625, 522626, 522627, 522628, 522629, 522630, 522631, 522632, 522633, 522634, 522635, 522636, 522700, 522701, 522702, 522722, 522723, 522725, 522726, 522727, 522728, 522729, 522730, 522731, 522732, 530000, 530100, 530101, 530102, 530103, 530111, 530112, 530113, 530114, 530122, 530124, 530125, 530126, 530127, 530128, 530129, 530181, 530300, 530301, 530302, 530321, 530322, 530323, 530324, 530325, 530326, 530328, 530381, 530400, 530401, 530402, 530421, 530422, 530423, 530424, 530425, 530426, 530427, 530428, 530500, 530501, 530502, 530521, 530523, 530524, 530581, 530600, 530601, 530602, 530621, 530622, 530623, 530624, 530625, 530626, 530627, 530628, 530629, 530630, 530700, 530701, 530702, 530721, 530722, 530723, 530724, 530800, 530801, 530802, 530821, 530822, 530823, 530824, 530825, 530826, 530827, 530828, 530829, 530900, 530901, 530902, 530921, 530922, 530923, 530924, 530925, 530926, 530927, 532300, 532301, 532322, 532323, 532324, 532325, 532326, 532327, 532328, 532329, 532331, 532500, 532501, 532502, 532503, 532504, 532523, 532524, 532525, 532527, 532528, 532529, 532530, 532531, 532532, 532600, 532601, 532622, 532623, 532624, 532625, 532626, 532627, 532628, 532800, 532801, 532822, 532823, 532900, 532901, 532922, 532923, 532924, 532925, 532926, 532927, 532928, 532929, 532930, 532931, 532932, 533100, 533102, 533103, 533122, 533123, 533124, 533300, 533321, 533323, 533324, 533325, 533400, 533401, 533422, 533423, 540000, 540100, 540101, 540102, 540121, 540122, 540123, 540124, 540125, 540126, 540127, 540200, 540202, 540221, 540222, 540223, 540224, 540225, 540226, 540227, 540228, 540229, 540230, 540231, 540232, 540233, 540234, 540235, 540236, 540237, 540300, 540302, 540321, 540322, 540323, 540324, 540325, 540326, 540327, 540328, 540329, 540330, 540400, 540402, 540421, 540422, 540423, 540424, 540425, 540426, 542200, 542221, 542222, 542223, 542224, 542225, 542226, 542227, 542228, 542229, 542231, 542232, 542233, 542400, 542421, 542422, 542423, 542424, 542425, 542426, 542427, 542428, 542429, 542430, 542431, 542500, 542521, 542522, 542523, 542524, 542525, 542526, 542527, 610000, 610100, 610101, 610102, 610103, 610104, 610111, 610112, 610113, 610114, 610115, 610116, 610117, 610122, 610124, 610125, 610200, 610201, 610202, 610203, 610204, 610222, 610300, 610301, 610302, 610303, 610304, 610322, 610323, 610324, 610326, 610327, 610328, 610329, 610330, 610331, 610400, 610401, 610402, 610403, 610404, 610422, 610423, 610424, 610425, 610426, 610427, 610428, 610429, 610430, 610431, 610481, 610500, 610501, 610502, 610521, 610522, 610523, 610524, 610525, 610526, 610527, 610528, 610581, 610582, 610600, 610601, 610602, 610621, 610622, 610623, 610624, 610625, 610626, 610627, 610628, 610629, 610630, 610631, 610632, 610700, 610701, 610702, 610721, 610722, 610723, 610724, 610725, 610726, 610727, 610728, 610729, 610730, 610800, 610801, 610802, 610821, 610822, 610823, 610824, 610825, 610826, 610827, 610828, 610829, 610830, 610831, 610900, 610901, 610902, 610921, 610922, 610923, 610924, 610925, 610926, 610927, 610928, 610929, 611000, 611001, 611002, 611021, 611022, 611023, 611024, 611025, 611026, 620000, 620100, 620101, 620102, 620103, 620104, 620105, 620111, 620121, 620122, 620123, 620200, 620201, 620300, 620301, 620302, 620321, 620400, 620401, 620402, 620403, 620421, 620422, 620423, 620500, 620501, 620502, 620503, 620521, 620522, 620523, 620524, 620525, 620600, 620601, 620602, 620621, 620622, 620623, 620700, 620701, 620702, 620721, 620722, 620723, 620724, 620725, 620800, 620801, 620802, 620821, 620822, 620823, 620824, 620825, 620826, 620900, 620901, 620902, 620921, 620922, 620923, 620924, 620981, 620982, 621000, 621001, 621002, 621021, 621022, 621023, 621024, 621025, 621026, 621027, 621100, 621101, 621102, 621121, 621122, 621123, 621124, 621125, 621126, 621200, 621201, 621202, 621221, 621222, 621223, 621224, 621225, 621226, 621227, 621228, 622900, 622901, 622921, 622922, 622923, 622924, 622925, 622926, 622927, 623000, 623001, 623021, 623022, 623023, 623024, 623025, 623026, 623027, 630000, 630100, 630101, 630102, 630103, 630104, 630105, 630121, 630122, 630123, 630200, 630202, 630203, 630222, 630223, 630224, 630225, 632200, 632221, 632222, 632223, 632224, 632300, 632321, 632322, 632323, 632324, 632500, 632521, 632522, 632523, 632524, 632525, 632600, 632621, 632622, 632623, 632624, 632625, 632626, 632700, 632701, 632722, 632723, 632724, 632725, 632726, 632800, 632801, 632802, 632821, 632822, 632823, 640000, 640100, 640101, 640104, 640105, 640106, 640121, 640122, 640181, 640200, 640201, 640202, 640205, 640221, 640300, 640301, 640302, 640303, 640323, 640324, 640381, 640400, 640401, 640402, 640422, 640423, 640424, 640425, 640500, 640501, 640502, 640521, 640522, 650000, 650100, 650101, 650102, 650103, 650104, 650105, 650106, 650107, 650109, 650121, 650200, 650201, 650202, 650203, 650204, 650205, 650400, 650402, 650421, 650422, 652200, 652201, 652222, 652223, 652300, 652301, 652302, 652323, 652324, 652325, 652327, 652328, 652700, 652701, 652702, 652722, 652723, 652800, 652801, 652822, 652823, 652824, 652825, 652826, 652827, 652828, 652829, 652900, 652901, 652922, 652923, 652924, 652925, 652926, 652927, 652928, 652929, 653000, 653001, 653022, 653023, 653024, 653100, 653101, 653121, 653122, 653123, 653124, 653125, 653126, 653127, 653128, 653129, 653130, 653131, 653200, 653201, 653221, 653222, 653223, 653224, 653225, 653226, 653227, 654000, 654002, 654003, 654004, 654021, 654022, 654023, 654024, 654025, 654026, 654027, 654028, 654200, 654201, 654202, 654221, 654223, 654224, 654225, 654226, 654300, 654301, 654321, 654322, 654323, 654324, 654325, 654326, 659000, 659001, 659002, 659003, 659004, 710000, 810000, 820000];

  var random = function random(start, end) {
    return Math.ceil(Math.random() * (end - start) + start);
  };

  var calcCityArea = function calcCityArea() {
    var len = city_code.length;
    var code = city_code[random(0, len - 1)];
    return code;
  };

  var calcYMD = function calcYMD() {
    // year, month, day
    var today = new Date();
    var max_y = today.getFullYear();
    var Y = random(1900, max_y) + '';
    var M = random(0, 12);

    if (M < 10) {
      M = '0' + M + '';
    }

    var D = random(0, 30);

    if (D < 10) {
      D = '0' + D + '';
    }

    var ymd = Y + M + D;
    return ymd;
  };

  var calcAreaPolice = function calcAreaPolice() {
    var code = random(0, 99);

    if (code < 10) {
      _readOnlyError("code");
    }

    return code;
  };

  var calcSex = function calcSex() {
    return random(0, 9);
  };

  var calcLastNo = function calcLastNo(str) {
    // ISO 7064:1983.MOD 11-2
    var weight_factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
    var check_code = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']; // the last no

    var arr = str.split('');
    var len = arr.length;
    var num = 0;

    for (var i = 0; i < len; i++) {
      num = num + arr[i] * weight_factor[i];
    }

    var resisue = num % 11;
    var last_no = check_code[resisue];
    return last_no;
  };

  var genIdCard = function genIdCard() {
    var area = calcCityArea();
    var ymd = calcYMD();
    var police = calcAreaPolice();
    var sex = calcSex();
    var id_code_17 = '' + area + ymd + police + sex;
    var last = calcLastNo(id_code_17);
    var id_code_18 = id_code_17 + last;
    return id_code_18;
  };
  var checkIdCard = function checkIdCard(idcode) {
    var code = idcode + '';
    var last = idcode[17];
    var seventeen = code.substring(0, 17);
    var real_last = calcLastNo(seventeen);
    var idcard_patter = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0|1][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/;
    var format = idcard_patter.test(idcode);
    return last === real_last && format ? true : false; // 校验码正确
  };

  var idCheck = /*#__PURE__*/Object.freeze({
    __proto__: null,
    genIdCard: genIdCard,
    checkIdCard: checkIdCard
  });

  var setConfig = adapter('setConfig');
  var ajax = adapter('ajax');
  var storage = adapter('storage');

  function adapter(api) {
    if (getPlatform() === 'ucf') {
      return ucfSdk[api];
    } else if (getPlatform() === 'web') {
      return webSdk[api];
    }
  }

  exports.ajax = ajax;
  exports.idCheckSdk = idCheck;
  exports.setConfig = setConfig;
  exports.storage = storage;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
